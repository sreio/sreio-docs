import{_ as i,c as a,e as n,o as e}from"./app-DDsjqNbb.js";const l="/assets/1-1-9kMuFdfv.png",t={};function h(p,s){return e(),a("div",null,s[0]||(s[0]=[n('<h2 id="_1-什么是工厂方法模式" tabindex="-1"><a class="header-anchor" href="#_1-什么是工厂方法模式"><span>1. 什么是工厂方法模式</span></a></h2><p>工厂方法模式是一种创建型设计模式，它提供了一种将对象的创建过程封装在子类中的方式。这样，客户端就可以通过调用工厂方法来创建对象，而无需关心对象的具体创建过程。</p><h2 id="_2-工厂方法模式的特点和优点" tabindex="-1"><a class="header-anchor" href="#_2-工厂方法模式的特点和优点"><span>2. 工厂方法模式的特点和优点</span></a></h2><p>工厂方法模式的特点包括：</p><ul><li>将对象的创建和使用解耦，客户端只需关心工厂方法和抽象产品接口。</li><li>可以通过添加新的具体工厂类和具体产品类来扩展系统，符合开闭原则。</li></ul><p>工厂方法模式的优点包括：</p><ul><li>封装了对象的创建过程，使系统更加灵活和可扩展。</li><li>隐藏了具体产品类的实现细节，减少了客户端对具体类的依赖和耦合。</li><li>提供了一种标准化的产品创建方式，方便了系统的维护和扩展。</li></ul><h2 id="_3-工厂方法模式的应用场景" tabindex="-1"><a class="header-anchor" href="#_3-工厂方法模式的应用场景"><span>3. 工厂方法模式的应用场景</span></a></h2><p>工厂方法模式适用于以下场景：</p><ul><li>客户端不依赖具体产品类，而是依赖于抽象产品接口。</li><li>客户端需要根据不同的条件动态创建不同的产品对象。</li><li>需要对产品对象的创建过程进行封装和隐藏。</li></ul><h2 id="_4-golang中的工厂方法模式实现" tabindex="-1"><a class="header-anchor" href="#_4-golang中的工厂方法模式实现"><span>4. Golang中的工厂方法模式实现</span></a></h2><h3 id="_4-1-uml类图" tabindex="-1"><a class="header-anchor" href="#_4-1-uml类图"><span>4.1 UML类图</span></a></h3><figure><img src="'+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-2-实现步骤1-定义抽象产品接口" tabindex="-1"><a class="header-anchor" href="#_4-2-实现步骤1-定义抽象产品接口"><span>4.2 实现步骤1：定义抽象产品接口</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-go"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">package</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> factory</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// Product 是抽象产品接口</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">type</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Product</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> interface</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    Operation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> string</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-实现步骤2-创建具体产品实现类" tabindex="-1"><a class="header-anchor" href="#_4-3-实现步骤2-创建具体产品实现类"><span>4.3 实现步骤2：创建具体产品实现类</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-go"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">package</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> factory</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// ConcreteProductA 是具体产品A类</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">type</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ConcreteProductA</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> struct</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// Operation 是具体产品A类的方法</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">func</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">p </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">ConcreteProductA</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Operation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> string</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ConcreteProductA</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// ConcreteProductB 是具体产品B类</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">type</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ConcreteProductB</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> struct</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// Operation 是具体产品B类的方法</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">func</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">p </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">ConcreteProductB</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Operation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> string</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ConcreteProductB</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-实现步骤3-定义抽象工厂接口" tabindex="-1"><a class="header-anchor" href="#_4-4-实现步骤3-定义抽象工厂接口"><span>4.4 实现步骤3：定义抽象工厂接口</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-go"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">package</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> factory</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// Factory 是抽象工厂接口</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">type</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Factory</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> interface</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    CreateProduct</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Product</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-5-实现步骤4-创建具体工厂实现类" tabindex="-1"><a class="header-anchor" href="#_4-5-实现步骤4-创建具体工厂实现类"><span>4.5 实现步骤4：创建具体工厂实现类</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-go"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">package</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> factory</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// ConcreteFactoryA 是具体工厂A类</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">type</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ConcreteFactoryA</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> struct</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// CreateProduct 是具体工厂A类的方法</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">func</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">f </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">ConcreteFactoryA</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> CreateProduct</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Product</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">ConcreteProductA</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// ConcreteFactoryB 是具体工厂B类</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">type</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ConcreteFactoryB</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> struct</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// CreateProduct 是具体工厂B类的方法</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">func</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">f </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">ConcreteFactoryB</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> CreateProduct</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Product</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">ConcreteProductB</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-6-实现步骤5-客户端调用工厂方法创建产品对象" tabindex="-1"><a class="header-anchor" href="#_4-6-实现步骤5-客户端调用工厂方法创建产品对象"><span>4.6 实现步骤5：客户端调用工厂方法创建产品对象</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-go"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">package</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">fmt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">github.com/your/package/factory</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">func</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 创建具体工厂A</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    factoryA</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">factory</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">ConcreteFactoryA</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 调用工厂方法创建产品对象</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    productA</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> factoryA</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">CreateProduct</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    fmt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">productA</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Operation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 创建具体工厂B</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    factoryB</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">factory</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">ConcreteFactoryB</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 调用工厂方法创建产品对象</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    productB</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> factoryB</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">CreateProduct</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    fmt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">productB</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Operation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码中，我们定义了抽象产品接口 Product 和具体产品类 ConcreteProductA 和 ConcreteProductB。然后，我们又定义了抽象工厂接口 Factory 和具体工厂类 ConcreteFactoryA 和 ConcreteFactoryB。客户端可以通过调用具体工厂类的工厂方法来创建具体产品对象，从而实现了工厂方法模式。</p><p>通过以上步骤，我们就完成了Golang工厂方法模式的实现。这种方式使得客户端和具体产品类之间实现了解耦，一方面客户端只需关心抽象产品接口，另一方面具体产品类的实现细节被封装在具体工厂类中，使得系统更加灵活和可扩展。工厂方法模式在实际应用中非常常见，特别是在需要动态创建不同类型对象的场景下，可以有效地提高代码的复用性和可维护性。</p>`,25)]))}const r=i(t,[["render",h]]),d=JSON.parse('{"path":"/golang/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/","title":"工厂模式","lang":"zh-CN","frontmatter":{"title":"工厂模式","createTime":"2025/07/08 09:45:34","permalink":"/golang/设计模式/工厂模式/","description":"1. 什么是工厂方法模式 工厂方法模式是一种创建型设计模式，它提供了一种将对象的创建过程封装在子类中的方式。这样，客户端就可以通过调用工厂方法来创建对象，而无需关心对象的具体创建过程。 2. 工厂方法模式的特点和优点 工厂方法模式的特点包括： 将对象的创建和使用解耦，客户端只需关心工厂方法和抽象产品接口。 可以通过添加新的具体工厂类和具体产品类来扩展系...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"工厂模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-08T02:28:08.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://docs.sreio.com/golang/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"}],["meta",{"property":"og:site_name","content":"Sreio Docs"}],["meta",{"property":"og:title","content":"工厂模式"}],["meta",{"property":"og:description","content":"1. 什么是工厂方法模式 工厂方法模式是一种创建型设计模式，它提供了一种将对象的创建过程封装在子类中的方式。这样，客户端就可以通过调用工厂方法来创建对象，而无需关心对象的具体创建过程。 2. 工厂方法模式的特点和优点 工厂方法模式的特点包括： 将对象的创建和使用解耦，客户端只需关心工厂方法和抽象产品接口。 可以通过添加新的具体工厂类和具体产品类来扩展系..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-08T02:28:08.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-08T02:28:08.000Z"}]]},"readingTime":{"minutes":3.09,"words":927},"git":{"createdTime":1751941688000,"updatedTime":1751941688000,"contributors":[{"name":"sreio","username":"sreio","email":"ingwei@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/sreio?v=4","url":"https://github.com/sreio"}],"changelog":[{"hash":"d57fb21cb27927b0c89eb7f1047937b7a671c0a1","time":1751941688000,"email":"ingwei@163.com","author":"sreio","message":"go"}]},"autoDesc":true,"filePathRelative":"golang/2.设计模式/1.创建型模型/2.工厂模式.md","headers":[]}');export{r as comp,d as data};
