import{_ as i,c as a,e,o as n}from"./app-DDsjqNbb.js";const l={};function h(t,s){return n(),a("div",null,s[0]||(s[0]=[e(`<p><code>ENTRYPOINT</code> 的格式和 <code>RUN</code> 指令格式一样，分为 <code>exec</code> 格式和 <code>shell</code> 格式。</p><p><code>ENTRYPOINT</code> 的目的和 <code>CMD</code> 一样，都是在指定容器启动程序及参数。<code>ENTRYPOINT</code> 在运行时也可以替代，不过比 <code>CMD</code> 要略显繁琐，需要通过 <code>docker run</code> 的参数 <code>--entrypoint</code> 来指定。</p><p>当指定了 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的含义就发生了改变，不再是直接的运行其命令，而是将 <code>CMD</code> 的内容作为参数传给 <code>ENTRYPOINT</code> 指令，换句话说实际执行时，将变为：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ENTRYPOINT</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&lt;CMD&gt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>那么有了 <code>CMD</code> 后，为什么还要有 <code>ENTRYPOINT</code> 呢？这种 <code>&lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;</code> 有什么好处么？让我们来看几个场景。</p><h4 id="场景一-让镜像变成像命令一样使用" tabindex="-1"><a class="header-anchor" href="#场景一-让镜像变成像命令一样使用"><span>场景一：让镜像变成像命令一样使用</span></a></h4><p>假设我们需要一个得知自己当前公网 IP 的镜像，那么可以先用 <code>CMD</code> 来实现：</p><div class="language-docker line-numbers-mode" data-highlighter="shiki" data-ext="docker" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-docker"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ubuntu:18.04</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">RUN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> apt-get update \\</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    &amp;&amp; apt-get install -y curl \\</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">CMD</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [ </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;curl&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;-s&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;http://myip.ipip.net&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假如我们使用 <code>docker build -t myip .</code> 来构建镜像的话，如果我们需要查询当前公网 IP，只需要执行：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> myip</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">当前</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> IP：61.148.226.66</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 来自：北京市</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 联通</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>嗯，这么看起来好像可以直接把镜像当做命令使用了，不过命令总有参数，如果我们希望加参数呢？比如从上面的 <code>CMD</code> 中可以看到实质的命令是 <code>curl</code>，那么如果我们希望显示 HTTP 头信息，就需要加上 <code>-i</code> 参数。那么我们可以直接加 <code>-i</code> 参数给 <code>docker run myip</code> 么？</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> myip</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -i</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Error</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> response</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> from</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> daemon:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> invalid</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> header</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> field</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> value</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">oci runtime error: container_linux.go:247: starting container process caused </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">exec: </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\\\\\&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">-i</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\\\\\&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">: executable file not found in $PATH</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到可执行文件找不到的报错，<code>executable file not found</code>。之前我们说过，跟在镜像名后面的是 <code>command</code>，运行时会替换 <code>CMD</code> 的默认值。因此这里的 <code>-i</code> 替换了原来的 <code>CMD</code>，而不是添加在原来的 <code>curl -s http://myip.ipip.net</code> 后面。而 <code>-i</code> 根本不是命令，所以自然找不到。</p><p>那么如果我们希望加入 <code>-i</code> 这参数，我们就必须重新完整的输入这个命令：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> myip</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> curl</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -s</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> http://myip.ipip.net</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -i</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这显然不是很好的解决方案，而使用 <code>ENTRYPOINT</code> 就可以解决这个问题。现在我们重新用 <code>ENTRYPOINT</code> 来实现这个镜像：</p><div class="language-docker line-numbers-mode" data-highlighter="shiki" data-ext="docker" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-docker"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ubuntu:18.04</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">RUN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> apt-get update \\</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    &amp;&amp; apt-get install -y curl \\</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ENTRYPOINT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [ </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;curl&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;-s&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;http://myip.ipip.net&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这次我们再来尝试直接使用 <code>docker run myip -i</code>：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> myip</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">当前</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> IP：61.148.226.66</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 来自：北京市</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 联通</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> myip</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -i</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">HTTP/1.1</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 200</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> OK</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Server:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> nginx/1.8.0</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Date:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Tue,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 22</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Nov</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2016</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 05:12:40</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> GMT</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Content-Type:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> text/html</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> charset</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">UTF-8</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Vary:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Accept-Encoding</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">X-Powered-By:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> PHP/5.6.24-1~dotdeb+7.1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">X-Cache:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> MISS</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> from</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cache-2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">X-Cache-Lookup:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> MISS</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> from</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cache-2:80</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">X-Cache:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> MISS</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> from</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> proxy-2_6</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Transfer-Encoding:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> chunked</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Via:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1.1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cache-2:80,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1.1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> proxy-2_6:8006</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Connection:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> keep-alive</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">当前</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> IP：61.148.226.66</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 来自：北京市</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 联通</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，这次成功了。这是因为当存在 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的内容将会作为参数传给 <code>ENTRYPOINT</code>，而这里 <code>-i</code> 就是新的 <code>CMD</code>，因此会作为参数传给 <code>curl</code>，从而达到了我们预期的效果。</p><h4 id="场景二-应用运行前的准备工作" tabindex="-1"><a class="header-anchor" href="#场景二-应用运行前的准备工作"><span>场景二：应用运行前的准备工作</span></a></h4><p>启动容器就是启动主进程，但有些时候，启动主进程前，需要一些准备工作。</p><p>比如 <code>mysql</code> 类的数据库，可能需要一些数据库配置、初始化的工作，这些工作要在最终的 mysql 服务器运行之前解决。</p><p>此外，可能希望避免使用 <code>root</code> 用户去启动服务，从而提高安全性，而在启动服务前还需要以 <code>root</code> 身份执行一些必要的准备工作，最后切换到服务用户身份启动服务。或者除了服务外，其它命令依旧可以使用 <code>root</code> 身份执行，方便调试等。</p><p>这些准备工作是和容器 <code>CMD</code> 无关的，无论 <code>CMD</code> 为什么，都需要事先进行一个预处理的工作。这种情况下，可以写一个脚本，然后放入 <code>ENTRYPOINT</code> 中去执行，而这个脚本会将接到的参数（也就是 <code>&lt;CMD&gt;</code>）作为命令，在脚本最后执行。比如官方镜像 <code>redis</code> 中就是这么做的：</p><div class="language-docker line-numbers-mode" data-highlighter="shiki" data-ext="docker" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-docker"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> alpine:3.4</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">...</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">RUN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> addgroup -S redis &amp;&amp; adduser -S -G redis redis</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">...</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ENTRYPOINT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;docker-entrypoint.sh&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">EXPOSE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 6379</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">CMD</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [ </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;redis-server&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到其中为了 redis 服务创建了 redis 用户，并在最后指定了 <code>ENTRYPOINT</code> 为 <code>docker-entrypoint.sh</code> 脚本。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#!/bin/sh</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">...</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># allow the container to be started with \`--user\`</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">$1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">redis-server</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -a</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">$(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">id</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -u</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">0</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ];</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> then</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">	find</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\!</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -user</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> redis</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -exec</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> chown</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> redis</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">{}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> +</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">	exec</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> gosu</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> redis</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">$0</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">$@</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">exec</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">$@</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该脚本的内容就是根据 <code>CMD</code> 的内容来判断，如果是 <code>redis-server</code> 的话，则切换到 <code>redis</code> 用户身份启动服务器，否则依旧使用 <code>root</code> 身份执行。比如：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -it</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> redis</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> id</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">uid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> gid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> groups</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,30)]))}const p=i(l,[["render",h]]),d=JSON.parse('{"path":"/linux/ENTRYPOINT%E5%85%A5%E5%8F%A3%E7%82%B9/","title":"ENTRYPOINT入口点","lang":"zh-CN","frontmatter":{"title":"ENTRYPOINT入口点","createTime":"2025/07/07 15:55:04","permalink":"/linux/ENTRYPOINT入口点/","description":"ENTRYPOINT 的格式和 RUN 指令格式一样，分为 exec 格式和 shell 格式。 ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数。ENTRYPOINT 在运行时也可以替代，不过比 CMD 要略显繁琐，需要通过 docker run 的参数 --entrypoint 来指定。 当指定了 ENTRYPOINT 后...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ENTRYPOINT入口点\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-07T08:09:54.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://docs.sreio.com/linux/ENTRYPOINT%E5%85%A5%E5%8F%A3%E7%82%B9/"}],["meta",{"property":"og:site_name","content":"Sreio Docs"}],["meta",{"property":"og:title","content":"ENTRYPOINT入口点"}],["meta",{"property":"og:description","content":"ENTRYPOINT 的格式和 RUN 指令格式一样，分为 exec 格式和 shell 格式。 ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数。ENTRYPOINT 在运行时也可以替代，不过比 CMD 要略显繁琐，需要通过 docker run 的参数 --entrypoint 来指定。 当指定了 ENTRYPOINT 后..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-07T08:09:54.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-07T08:09:54.000Z"}]]},"readingTime":{"minutes":4.09,"words":1228},"git":{"createdTime":1751875794000,"updatedTime":1751875794000,"contributors":[{"name":"sreio","username":"sreio","email":"ingwei@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/sreio?v=4","url":"https://github.com/sreio"}],"changelog":[{"hash":"309568ac808a0e32f2a30faf8785a5bb75211f52","time":1751875794000,"email":"ingwei@163.com","author":"sreio","message":"docker"}]},"autoDesc":true,"filePathRelative":"linux/7.Docker-从入门到实践/5.Dockerfile指令详解/4.ENTRYPOINT入口点.md","headers":[]}');export{p as comp,d as data};
