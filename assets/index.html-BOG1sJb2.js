import{_ as i,c as a,e,o as n}from"./app-DDsjqNbb.js";const l={};function h(t,s){return n(),a("div",null,s[0]||(s[0]=[e(`<p>RabbitMQ原生不支持延迟消息，目前主要通过死信交换机 + 消息TTL方案或者rabbitmq-delayed-message-exchange插件实现。</p><h2 id="延迟队列应用场景" tabindex="-1"><a class="header-anchor" href="#延迟队列应用场景"><span>延迟队列应用场景</span></a></h2><ul><li>对消息生产和消费有时间窗口要求的场景。例如，在电商交易中超时未支付关闭订单的场景，在订单创建时会发送一条延时消息。这条消息将会在30分钟以后投递给消费者，消费者收到此消息后需要判断对应的订单是否已完成支付。如支付未完成，则关闭订单。如已完成支付则忽略。</li><li>通过消息触发延时任务的场景。例如，在指定时间段之后向用户发送提醒消息。</li></ul><h2 id="死信交换机-消息ttl方案" tabindex="-1"><a class="header-anchor" href="#死信交换机-消息ttl方案"><span>死信交换机 + 消息TTL方案</span></a></h2><p>这个方案核心思想就是，创建一个没有消费者的队列，借助消息过期时间（TTL），当一条消息过期后会成为死信，这条死信消息会投递到死信交换机，死信交换机将消息发给死信队列，我们只要消费死信队列即可。</p><p>在这个方案中，消息过期时间就是消息延迟时间，例如： 消息TTL=30秒，因为这个队列没有消费者，消息30秒后过期，这条消息就变成死信，会被死信队列处理。</p><p>实现方案结合下面两个章节的教程设置下属性即可：</p><ul><li>死信队列</li><li>消息TTL</li></ul><h2 id="延迟消息插件方案" tabindex="-1"><a class="header-anchor" href="#延迟消息插件方案"><span>延迟消息插件方案</span></a></h2><h3 id="_1-安装插件" tabindex="-1"><a class="header-anchor" href="#_1-安装插件"><span>1.安装插件</span></a></h3><p><code>rabbitmq-delayed-message-exchange</code>的Github地址: https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases</p><p>从github的release页面的assets, 下载rabbitmq_delayed_message_exchange-3.8.9-0199d11c.ez文件，把文件放到rabbitmq插件目录（plugins目录）</p><div class="hint-container tip"><p class="hint-container-title">提示：版本号可能跟本教程不一样，如果你的rabbitmq就是最新版本，插件也选择最新版本就行。</p></div><h3 id="_2-激活插件" tabindex="-1"><a class="header-anchor" href="#_2-激活插件"><span>2.激活插件</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">rabbitmq-plugins</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> enable</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rabbitmq_delayed_message_exchange</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_3-定义交换机" tabindex="-1"><a class="header-anchor" href="#_3-定义交换机"><span>3.定义交换机</span></a></h3><p>通过x-delayed-type设置自定义交换机属性，支持发送延迟消息</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-go"><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    props</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> make</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">map</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">string</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">interface</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{})</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //关键参数，支持发送延迟消息</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    props</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">x-delayed-type</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">direct</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 声明交换机</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    err</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ExchangeDeclare</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">        &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">delay.queue</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   // 交换机名字</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">        &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">fanout</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 交换机类型</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     // 是否持久化</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        props</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      // 设置属性</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    )</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-发送延迟消息" tabindex="-1"><a class="header-anchor" href="#_4-发送延迟消息"><span>4.发送延迟消息</span></a></h3><p>通过消息头（x-delay），设置消息延迟时间。</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-go"><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        msgHeaders</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> make</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">map</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">string</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">interface</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{})</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 通过消息头，设置消息延迟时间，单位毫秒</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        msgHeaders</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">x-delay</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 6000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        err</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Publish</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">            &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">delay.queue</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     // 交换机名字</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">            &quot;&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 路由参数</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">            amqp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Publishing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">                Headers</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">msgHeaders</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 设置消息头</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">                ContentType</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">text/plain</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">                Body</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">        []</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">byte</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">body</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            })</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示：如果你直接使用阿里云的RabbitMQ消息云服务，通过消息头属性（delay），设置延迟时间即可，不用安装插件，阿里云已经对rabbitmq扩展了。</p></div>`,22)]))}const k=i(l,[["render",h]]),d=JSON.parse('{"path":"/queue/RabbitMQ/%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/","title":"延迟队列","lang":"zh-CN","frontmatter":{"title":"延迟队列","createTime":"2025/07/07 17:03:37","permalink":"/queue/RabbitMQ/延迟队列/","description":"RabbitMQ原生不支持延迟消息，目前主要通过死信交换机 + 消息TTL方案或者rabbitmq-delayed-message-exchange插件实现。 延迟队列应用场景 对消息生产和消费有时间窗口要求的场景。例如，在电商交易中超时未支付关闭订单的场景，在订单创建时会发送一条延时消息。这条消息将会在30分钟以后投递给消费者，消费者收到此消息后需要...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"延迟队列\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-14T03:14:18.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://docs.sreio.com/queue/RabbitMQ/%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/"}],["meta",{"property":"og:site_name","content":"Sreio Docs"}],["meta",{"property":"og:title","content":"延迟队列"}],["meta",{"property":"og:description","content":"RabbitMQ原生不支持延迟消息，目前主要通过死信交换机 + 消息TTL方案或者rabbitmq-delayed-message-exchange插件实现。 延迟队列应用场景 对消息生产和消费有时间窗口要求的场景。例如，在电商交易中超时未支付关闭订单的场景，在订单创建时会发送一条延时消息。这条消息将会在30分钟以后投递给消费者，消费者收到此消息后需要..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-14T03:14:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-14T03:14:18.000Z"}]]},"readingTime":{"minutes":2.4,"words":719},"git":{"createdTime":1751879564000,"updatedTime":1752462858000,"contributors":[{"name":"sreio","username":"sreio","email":"ingwei@163.com","commits":2,"avatar":"https://avatars.githubusercontent.com/sreio?v=4","url":"https://github.com/sreio"}],"changelog":[{"hash":"392e0717075550911bee8967562578d34bf94c89","time":1752462858000,"email":"ingwei@163.com","author":"sreio","message":"updated: fixed tip"},{"hash":"ec6b65d5f5e156de0bddee87610673d45a5591df","time":1751879564000,"email":"ingwei@163.com","author":"sreio","message":"queue"}]},"autoDesc":true,"filePathRelative":"queue/2.RabbitMQ教程/6.高级专题/5.延迟队列.md","headers":[]}');export{k as comp,d as data};
