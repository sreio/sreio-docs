import{_ as a,c as e,e as n,o as s}from"./app-DDsjqNbb.js";const t={};function l(p,i){return s(),e("div",null,i[0]||(i[0]=[n(`<h3 id="init" tabindex="-1"><a class="header-anchor" href="#init"><span>init</span></a></h3><div class="hint-container note"><p class="hint-container-title">注</p><p>go语言中 <code>init</code> 函数用于 <code>包(package)</code> 的初始化，该函数是go语言的一个重要特性。</p></div><pre><code>1 init函数是用于程序执行前做包的初始化的函数，比如初始化包里的变量等

2 每个包可以拥有多个init函数

3 包的每个源文件也可以拥有多个init函数

4 同一个包中多个init函数的执行顺序go语言没有明确的定义(说明)

5 不同包的init函数按照包导入的依赖关系决定该初始化函数的执行顺序

6 init函数不能被其他函数调用，而是在main函数执行之前，自动被调用
</code></pre><h3 id="main" tabindex="-1"><a class="header-anchor" href="#main"><span>main</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-go"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // Go语言程序的默认入口函数(主函数)：func main()</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //函数体用｛｝一对括号包裹。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    func</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //函数体</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>  相同点：</span></span>
<span class="line"><span>    两个函数在定义时不能有任何的参数和返回值，且Go程序自动调用。</span></span>
<span class="line"><span>  不同点：</span></span>
<span class="line"><span>    init可以应用于任意包中，且可以重复定义多个。</span></span>
<span class="line"><span>    main函数只能用于main包中，且只能定义一个。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两个函数的执行顺序：</p><p>对同一个go文件的init()调用顺序是从上到下的。</p><p>对同一个package中不同文件是按文件名字符串比较“从小到大”顺序调用各文件中的init()函数。</p><p>对于不同的package，如果不相互依赖的话，按照main包中&quot;先import的后调用&quot;的顺序调用其包中的init()，如果package存在依赖，则先调用最早被依赖的package中的init()，最后调用main函数。</p><p>如果init函数中使用了println()或者print()你会发现在执行过程中这两个不会按照你想象中的顺序执行。这两个函数官方只推荐在测试环境中使用，对于正式环境不要使用。</p>`,12)]))}const r=a(t,[["render",l]]),o=JSON.parse('{"path":"/golang/golang_study/Init_main%E5%87%BD%E6%95%B0/","title":"Init&main函数","lang":"zh-CN","frontmatter":{"title":"Init&main函数","createTime":"2025/07/02 23:22:38","permalink":"/golang/golang_study/Init&main函数/","description":"init 注 go语言中 init 函数用于 包(package) 的初始化，该函数是go语言的一个重要特性。 main 两个函数的执行顺序： 对同一个go文件的init()调用顺序是从上到下的。 对同一个package中不同文件是按文件名字符串比较“从小到大”顺序调用各文件中的init()函数。 对于不同的package，如果不相互依赖的话，按照ma...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Init&main函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-03T10:28:55.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://docs.sreio.com/golang/golang_study/Init_main%E5%87%BD%E6%95%B0/"}],["meta",{"property":"og:site_name","content":"Sreio Docs"}],["meta",{"property":"og:title","content":"Init&main函数"}],["meta",{"property":"og:description","content":"init 注 go语言中 init 函数用于 包(package) 的初始化，该函数是go语言的一个重要特性。 main 两个函数的执行顺序： 对同一个go文件的init()调用顺序是从上到下的。 对同一个package中不同文件是按文件名字符串比较“从小到大”顺序调用各文件中的init()函数。 对于不同的package，如果不相互依赖的话，按照ma..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-03T10:28:55.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-03T10:28:55.000Z"}]]},"readingTime":{"minutes":1.66,"words":499},"git":{"createdTime":1751475331000,"updatedTime":1751538535000,"contributors":[{"name":"sreio","username":"sreio","email":"ingwei@163.com","commits":3,"avatar":"https://avatars.githubusercontent.com/sreio?v=4","url":"https://github.com/sreio"}],"changelog":[{"hash":"045abf9050498a773daedc6c459b49b2258bd56f","time":1751538535000,"email":"ingwei@163.com","author":"sreio","message":"update"},{"hash":"bebfa7543857b9d8c19476b68527fc2acfde7ccc","time":1751522764000,"email":"ingwei@163.com","author":"sreio","message":"update"},{"hash":"e167b6fa50ba64090fcf267d4483c8e2c3015198","time":1751475331000,"email":"ingwei@163.com","author":"sreio","message":"first"}]},"autoDesc":true,"filePathRelative":"golang/1.入门教程/1.基础/2.Init&main函数.md","headers":[]}');export{r as comp,o as data};
