import{_ as e,c as o,e as i,o as l}from"./app-DDsjqNbb.js";const t={};function r(c,a){return l(),o("div",null,a[0]||(a[0]=[i('<h2 id="_1-kafka-的功能" tabindex="-1"><a class="header-anchor" href="#_1-kafka-的功能"><span>1.Kafka 的功能</span></a></h2><p>Kafka 的核心功能如下：</p><ul><li><code>消息引擎</code> - Kafka 可以作为一个消息引擎系统。</li><li><code>流处理</code> - Kafka 可以作为一个分布式流处理平台。</li><li><code>存储</code> - Kafka 可以作为一个安全的分布式存储。</li></ul><h2 id="_2-kafka-的特性" tabindex="-1"><a class="header-anchor" href="#_2-kafka-的特性"><span>2.Kafka 的特性</span></a></h2><p>Kafka 的设计目标：</p><ul><li><strong>高性能</strong><ul><li><code>分区、分段、索引</code>：基于分区机制提供并发处理能力。分段、索引提升了数据读写的查询效率。</li><li><code>顺序读写</code>：使用顺序读写提升磁盘 IO 性能。</li><li><code>零拷贝</code>：利用零拷贝技术，提升网络 I/O 效率。</li><li><code>页缓存</code>：利用操作系统的 PageCache 来缓存数据（典型的利用空间换时间）</li><li><code>批量读写</code>：批量读写可以有效提升网络 I/O 效率。</li><li><code>数据压缩</code>：Kafka 支持数据压缩，可以有效提升网络 I/O 效率。</li><li><code>pull 模式</code>：Kafka 架构基于 pull 模式，可以自主控制消费策略，提升传输效率。</li></ul></li><li><strong>高可用</strong><ul><li><code>持久化</code>：Kafka 所有的消息都存储在磁盘，天然支持持久化。</li><li><code>副本机制</code>：Kafka 的 Broker 集群支持副本机制，可以通过冗余，来保证其整体的可用性。</li><li><code>选举 Leader</code>：Kafka 基于 ZooKeeper 支持选举 Leader，实现了故障转移能力。</li></ul></li><li><strong>伸缩性</strong><ul><li><code>分区</code>：Kafka 的分区机制使得其具有良好的伸缩性。</li></ul></li></ul><h2 id="_3-kafka-术语" tabindex="-1"><a class="header-anchor" href="#_3-kafka-术语"><span>3.Kafka 术语</span></a></h2><ul><li><code>消息</code>：Kafka 的数据单元被称为消息。消息由字节数组组成。</li><li><code>批次</code>：批次就是一组消息，这些消息属于同一个主题和分区。</li><li><code>主题（Topic）</code>：Kafka 消息通过主题进行分类。主题就类似数据库的表。 <ul><li>不同主题的消息是物理隔离的；</li><li>同一个主题的消息保存在一个或多个 Broker 上。但用户只需指定消息的 Topic 即可生产或消费数据而不必关心数据存于何处。</li><li>主题有一个或多个分区。</li></ul></li><li><code>分区（Partition）</code>：分区是一个有序不变的消息序列，消息以追加的方式写入分区，然后以先入先出的顺序读取。Kafka 通过分区来实现数据冗余和伸缩性。</li><li><code>消息偏移量（Offset）</code>：表示分区中每条消息的位置信息，是一个单调递增且不变的值。</li><li><code>生产者（Producer）</code>：生产者是向主题发布新消息的 Kafka 客户端。生产者可以将数据发布到所选择的主题中。生产者负责将记录分配到主题中的哪一个分区中。</li><li><code>消费者（Consumer）</code>：消费者是从主题订阅新消息的 Kafka 客户端。消费者通过检查消息的偏移量来区分消息是否已读。</li><li><code>消费者群组（Consumer Group）</code>：多个消费者共同构成的一个群组，同时消费多个分区以实现高并发。 <ul><li>每个消费者属于一个特定的消费者群组（可以为每个消费者指定消费者群组，若不指定，则属于默认的群组）。</li><li>群组中，一个消费者可以消费多个分区</li><li>群组中，每个分区只能被指定给一个消费</li></ul></li><li><code>再均衡（Rebalance）</code>：消费者组内某个消费者实例挂掉后，其他消费者实例自动重新分配订阅主题分区的过程。分区再均衡是 Kafka 消费者端实现高可用的重要手段。</li><li><code>Broker</code> : 一个独立的 Kafka 服务器被称为 Broker。Broker 接受来自生产者的消息，为消息设置偏移量，并提交消息到磁盘保存；消费者向 Broker 请求消息，Broker 负责返回已提交的消息。</li><li><code>副本（Replica）</code>：Kafka 中同一条消息能够被拷贝到多个地方以提供数据冗余，这些地方就是所谓的副本。副本还分为领导者副本和追随者副本，各自有不同的角色划分。副本是在分区层级下的，即每个分区可配置多个副本实现高可用。</li></ul><h2 id="_4-kafka-发行版本" tabindex="-1"><a class="header-anchor" href="#_4-kafka-发行版本"><span>4.Kafka 发行版本</span></a></h2><p>Kafka 主要有以下发行版本：</p><ul><li><code>Apache Kafka</code>：也称社区版 Kafka。优势在于迭代速度快，社区响应度高，使用它可以让你有更高的把控度；缺陷在于仅提供基础核心组件，缺失一些高级的特性。</li><li><code>Confluent Kafka</code>：Confluent 公司提供的 Kafka。优势在于集成了很多高级特性且由 Kafka 原班人马打造，质量上有保证；缺陷在于相关文档资料不全，普及率较低，没有太多可供参考的范例。</li><li><code>CDH/HDP Kafka</code>：大数据云公司提供的 Kafka，内嵌 Apache Kafka。优势在于操作简单，节省运维成本；缺陷在于把控度低，演进速度较慢。</li></ul><h2 id="_5-参考资料" tabindex="-1"><a class="header-anchor" href="#_5-参考资料"><span>5.参考资料</span></a></h2><ul><li>[1] <a href="https://kafka.apache.org/" target="_blank" rel="noopener noreferrer">Kafka 官网</a></li><li>[2] <a href="https://kafka.apache.org/documentation/" target="_blank" rel="noopener noreferrer">Kafka 官方文档</a></li><li>[3] <a href="https://kafka.apachecn.org/" target="_blank" rel="noopener noreferrer">Kafka 官方文档中文版</a></li></ul>',13)]))}const n=e(t,[["render",r]]),k=JSON.parse('{"path":"/queue/kafka/%E7%AE%80%E4%BB%8B/","title":"简介","lang":"zh-CN","frontmatter":{"title":"简介","createTime":"2025/07/07 17:05:57","permalink":"/queue/kafka/简介/","description":"1.Kafka 的功能 Kafka 的核心功能如下： 消息引擎 - Kafka 可以作为一个消息引擎系统。 流处理 - Kafka 可以作为一个分布式流处理平台。 存储 - Kafka 可以作为一个安全的分布式存储。 2.Kafka 的特性 Kafka 的设计目标： 高性能 分区、分段、索引：基于分区机制提供并发处理能力。分段、索引提升了数据读写的查询...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"简介\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-07T09:12:44.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://docs.sreio.com/queue/kafka/%E7%AE%80%E4%BB%8B/"}],["meta",{"property":"og:site_name","content":"Sreio Docs"}],["meta",{"property":"og:title","content":"简介"}],["meta",{"property":"og:description","content":"1.Kafka 的功能 Kafka 的核心功能如下： 消息引擎 - Kafka 可以作为一个消息引擎系统。 流处理 - Kafka 可以作为一个分布式流处理平台。 存储 - Kafka 可以作为一个安全的分布式存储。 2.Kafka 的特性 Kafka 的设计目标： 高性能 分区、分段、索引：基于分区机制提供并发处理能力。分段、索引提升了数据读写的查询..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-07T09:12:44.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-07T09:12:44.000Z"}]]},"readingTime":{"minutes":4.1,"words":1231},"git":{"createdTime":1751879564000,"updatedTime":1751879564000,"contributors":[{"name":"sreio","username":"sreio","email":"ingwei@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/sreio?v=4","url":"https://github.com/sreio"}],"changelog":[{"hash":"ec6b65d5f5e156de0bddee87610673d45a5591df","time":1751879564000,"email":"ingwei@163.com","author":"sreio","message":"queue"}]},"autoDesc":true,"filePathRelative":"queue/3.Kafka/1.kafka简介.md","headers":[]}');export{n as comp,k as data};
