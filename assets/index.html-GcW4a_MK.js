import{_ as n,c as l,b as a,e as h,d as i,a as t,w as k,r as p,o as d}from"./app-DDsjqNbb.js";const r="/assets/2-6-C3v1xDdW.png",g="/assets/3-2-DsFsJQHj.png",c={};function o(A,s){const e=p("VPLink");return d(),l("div",null,[a("blockquote",null,[a("p",null,[s[1]||(s[1]=i("注意：如果您是初学者，您可以暂时跳过后面的内容，直接学习 ")),t(e,{href:"../container"},{default:k(()=>s[0]||(s[0]=[i("容器")])),_:1,__:[0]}),s[2]||(s[2]=i(" 一节。"))])]),s[3]||(s[3]=h('<p>注意： <code>docker commit</code> 命令除了学习之外，还有一些特殊的应用场合，比如被入侵后保存现场等。但是，不要使用 <code>docker commit</code> 定制镜像，定制镜像应该使用 <code>Dockerfile</code> 来完成。如果你想要定制镜像请查看下一小节。</p><p>镜像是容器的基础，每次执行 <code>docker run</code> 的时候都会指定哪个镜像作为容器运行的基础。在之前的例子中，我们所使用的都是来自于 Docker Hub 的镜像。直接使用这些镜像是可以满足一定的需求，而当这些镜像无法直接满足需求时，我们就需要定制这些镜像。接下来的几节就将讲解如何定制镜像。</p><p>回顾一下之前我们学到的知识，镜像是多层存储，每一层是在前一层的基础上进行的修改；而容器同样也是多层存储，是在以镜像为基础层，在其基础上加一层作为容器运行时的存储层。</p><p>现在让我们以定制一个 Web 服务器为例子，来讲解镜像是如何构建的。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> webserver</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 80:80</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> nginx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这条命令会用 <code>nginx</code> 镜像启动一个容器，命名为 <code>webserver</code>，并且映射了 80 端口，这样我们可以用浏览器去访问这个 <code>nginx</code> 服务器。</p><p>如果是在本机运行的 Docker，那么可以直接访问：<code>http://localhost</code> ，如果是在虚拟机、云服务器上安装的 Docker，则需要将 <code>localhost</code> 换为虚拟机地址或者实际云服务器地址。</p><p>直接用浏览器访问的话，我们会看到默认的 Nginx 欢迎页面。</p><figure><img src="'+r+`" alt="" tabindex="0" loading="lazy" width="1394" height="738"><figcaption></figcaption></figure><p>现在，假设我们非常不喜欢这个欢迎页面，我们希望改成欢迎 Docker 的文字，我们可以使用 <code>docker exec</code> 命令进入容器，修改其内容。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> exec</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -it</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> webserver</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> bash</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">root@3729b97e8226:/#</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> echo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&lt;h1&gt;Hello, Docker!&lt;/h1&gt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /usr/share/nginx/html/index.html</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">root@3729b97e8226:/#</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> exit</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">exit</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们以交互式终端方式进入 <code>webserver</code> 容器，并执行了 <code>bash</code> 命令，也就是获得一个可操作的 Shell。</p><p>然后，我们用 <code>&lt;h1&gt;Hello, Docker!&lt;/h1&gt;</code> 覆盖了 <code>/usr/share/nginx/html/index.html</code> 的内容。</p><p>现在我们再刷新浏览器的话，会发现内容被改变了。</p><figure><img src="`+g+`" alt="" tabindex="0" loading="lazy" width="1454" height="868"><figcaption></figcaption></figure><p>我们修改了容器的文件，也就是改动了容器的存储层。我们可以通过 <code>docker diff</code> 命令看到具体的改动。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> diff</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> webserver</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">C</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /root</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">A</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /root/.bash_history</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">C</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /run</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">C</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /usr</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">C</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /usr/share</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">C</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /usr/share/nginx</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">C</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /usr/share/nginx/html</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">C</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /usr/share/nginx/html/index.html</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">C</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /var</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">C</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /var/cache</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">C</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /var/cache/nginx</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">A</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /var/cache/nginx/client_temp</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">A</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /var/cache/nginx/fastcgi_temp</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">A</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /var/cache/nginx/proxy_temp</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">A</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /var/cache/nginx/scgi_temp</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">A</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /var/cache/nginx/uwsgi_temp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们定制好了变化，我们希望能将其保存下来形成镜像。</p><p>要知道，当我们运行一个容器的时候（如果不使用卷的话），我们做的任何文件修改都会被记录于容器存储层里。而 Docker 提供了一个 <code>docker commit</code> 命令，可以将容器的存储层保存下来成为镜像。换句话说，就是在原有镜像的基础上，再叠加上容器的存储层，并构成新的镜像。以后我们运行这个新镜像的时候，就会拥有原有容器最后的文件变化。</p><p><code>docker commit</code> 的语法格式为：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [选项] </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">容器ID或容器名</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">仓库名</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">标签</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们可以用下面的命令将容器保存为镜像：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">    --author</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Tao Wang &lt;twang2218@gmail.com&gt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">    --message</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">修改了默认网页</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    webserver</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    nginx:v2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sha256:07e33465974800ce65751acc279adc6ed2dc5ed4e0838f8b86f0c87aa1795214</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>--author</code> 是指定修改的作者，而 <code>--message</code> 则是记录本次修改的内容。这点和 <code>git</code> 版本控制相似，不过这里这些信息可以省略留空。</p><p>我们可以在 <code>docker image ls</code> 中看到这个新定制的镜像：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> image</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ls</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> nginx</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">REPOSITORY</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">          TAG</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                 IMAGE</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ID</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">            CREATED</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">             SIZE</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">nginx</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">               v2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                  07e334659748</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">        9</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> seconds</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ago</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">       181.5</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> MB</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">nginx</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">               1.11</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                05a60462f8ba</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">        12</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> days</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ago</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">         181.5</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> MB</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">nginx</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">               latest</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">              e43d811ce2f4</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">        4</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> weeks</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ago</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">         181.5</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> MB</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还可以用 <code>docker history</code> 具体查看镜像内的历史记录，如果比较 <code>nginx:latest</code> 的历史记录，我们会发现新增了我们刚刚提交的这一层。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> history</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> nginx:v2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">IMAGE</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">               CREATED</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">             CREATED</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> BY</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                                      SIZE</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                COMMENT</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">07e334659748</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">        54</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> seconds</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ago</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">      nginx</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -g</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> daemon</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> off</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">                            95</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> B</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">                修改了默认网页</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">e43d811ce2f4</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">        4</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> weeks</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ago</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">         /bin/sh</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -c</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> #(nop)  CMD [&quot;nginx&quot; &quot;-g&quot; &quot;daemon    0 B</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">missing</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">           4 weeks ago         /bin/sh -c </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#(nop)  EXPOSE 443/tcp 80/tcp        0 B</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">missing</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">           4 weeks ago         /bin/sh -c ln -sf /dev/stdout /var/log/nginx/   22 B</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">missing</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">           4 weeks ago         /bin/sh -c apt-key adv --keyserver hkp://pgp.   58.46 MB</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">missing</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">           4 weeks ago         /bin/sh -c </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#(nop)  ENV NGINX_VERSION=1.11.5-1   0 B</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">missing</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">           4 weeks ago         /bin/sh -c </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#(nop)  MAINTAINER NGINX Docker Ma   0 B</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">missing</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">           4 weeks ago         /bin/sh -c </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#(nop)  CMD [&quot;/bin/bash&quot;]            0 B</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">missing</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">           4 weeks ago         /bin/sh -c </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#(nop) ADD file:23aa4f893e3288698c   123 MB</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新的镜像定制好后，我们可以来运行这个镜像。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> web2</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 81:80</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> nginx:v2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里我们命名为新的服务为 <code>web2</code>，并且映射到 <code>81</code> 端口。访问 <code>http://localhost:81</code> 看到结果，其内容应该和之前修改后的 <code>webserver</code> 一样。</p><p>至此，我们第一次完成了定制镜像，使用的是 <code>docker commit</code> 命令，手动操作给旧的镜像添加了新的一层，形成新的镜像，对镜像多层存储应该有了更直观的感觉。</p><h2 id="慎用-docker-commit" tabindex="-1"><a class="header-anchor" href="#慎用-docker-commit"><span>慎用 <code>docker commit</code></span></a></h2><p>使用 <code>docker commit</code> 命令虽然可以比较直观的帮助理解镜像分层存储的概念，但是实际环境中并不会这样使用。</p><p>首先，如果仔细观察之前的 <code>docker diff webserver</code> 的结果，你会发现除了真正想要修改的 <code>/usr/share/nginx/html/index.html</code> 文件外，由于命令的执行，还有很多文件被改动或添加了。这还仅仅是最简单的操作，如果是安装软件包、编译构建，那会有大量的无关内容被添加进来，将会导致镜像极为臃肿。</p><p>此外，使用 <code>docker commit</code> 意味着所有对镜像的操作都是黑箱操作，生成的镜像也被称为 <strong>黑箱镜像</strong>，换句话说，就是除了制作镜像的人知道执行过什么命令、怎么生成的镜像，别人根本无从得知。而且，即使是这个制作镜像的人，过一段时间后也无法记清具体的操作。这种黑箱镜像的维护工作是非常痛苦的。</p><p>而且，回顾之前提及的镜像所使用的分层存储的概念，除当前层外，之前的每一层都是不会发生改变的，换句话说，任何修改的结果仅仅是在当前层进行标记、添加、修改，而不会改动上一层。如果使用 <code>docker commit</code> 制作镜像，以及后期修改的话，每一次修改都会让镜像更加臃肿一次，所删除的上一层的东西并不会丢失，会一直如影随形的跟着这个镜像，即使根本无法访问到。这会让镜像更加臃肿。</p>`,37))])}const m=n(c,[["render",o]]),B=JSON.parse('{"path":"/linux/%E5%88%A9%E7%94%A8commit%E7%90%86%E8%A7%A3%E9%95%9C%E5%83%8F%E6%9E%84%E6%88%90/","title":"利用commit理解镜像构成","lang":"zh-CN","frontmatter":{"title":"利用commit理解镜像构成","createTime":"2025/07/07 15:49:08","permalink":"/linux/利用commit理解镜像构成/","description":"注意：如果您是初学者，您可以暂时跳过后面的内容，直接学习 一节。 注意： docker commit 命令除了学习之外，还有一些特殊的应用场合，比如被入侵后保存现场等。但是，不要使用 docker commit 定制镜像，定制镜像应该使用 Dockerfile 来完成。如果你想要定制镜像请查看下一小节。 镜像是容器的基础，每次执行 docker run...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"利用commit理解镜像构成\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-07T08:09:54.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://docs.sreio.com/linux/%E5%88%A9%E7%94%A8commit%E7%90%86%E8%A7%A3%E9%95%9C%E5%83%8F%E6%9E%84%E6%88%90/"}],["meta",{"property":"og:site_name","content":"Sreio Docs"}],["meta",{"property":"og:title","content":"利用commit理解镜像构成"}],["meta",{"property":"og:description","content":"注意：如果您是初学者，您可以暂时跳过后面的内容，直接学习 一节。 注意： docker commit 命令除了学习之外，还有一些特殊的应用场合，比如被入侵后保存现场等。但是，不要使用 docker commit 定制镜像，定制镜像应该使用 Dockerfile 来完成。如果你想要定制镜像请查看下一小节。 镜像是容器的基础，每次执行 docker run..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-07T08:09:54.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-07T08:09:54.000Z"}]]},"readingTime":{"minutes":5.92,"words":1776},"git":{"createdTime":1751875794000,"updatedTime":1751875794000,"contributors":[{"name":"sreio","username":"sreio","email":"ingwei@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/sreio?v=4","url":"https://github.com/sreio"}],"changelog":[{"hash":"309568ac808a0e32f2a30faf8785a5bb75211f52","time":1751875794000,"email":"ingwei@163.com","author":"sreio","message":"docker"}]},"autoDesc":true,"filePathRelative":"linux/7.Docker-从入门到实践/4.使用镜像/4.利用commit理解镜像构成.md","headers":[]}');export{m as comp,B as data};
