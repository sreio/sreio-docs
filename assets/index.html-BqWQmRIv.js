import{_ as l,c as p,e,o as t}from"./app-DDsjqNbb.js";const a={};function o(r,i){return t(),p("div",null,i[0]||(i[0]=[e("<p>到这里，我们分析完了在php-fpm进程接收到nginx发起一个内部http请求后，Laravel框架是如何完整处理这个请求的。</p><p>在nginx阶段，nginx会把所有某个域名下的的http请求都转发给配置文件中定义目录（框架public目录）下的index.php文件，同时指定端口号。这里之所以要指定端口号，是因为在操作系统中，进程是以端口号来区分不同的服务。我们常见的9000端口，实际就是对应的php-fpm进程。</p><p>通过完整地分析一个php请求的生命周期，我们能清晰得看到Laravel框架的大致思路和结构。</p><p>现在回过头来看，大家有没有觉得，Laravel框架就像是构造了一套完整的结构精巧的组件。通过组合这些不同的组件，我们得到了一个能有效处理http请求的工具。</p><p>这个过程很像是搭乐高积木，乐高提前生产了一套可自由拼装的积木(组件)，用户使用这些积木(组件)进行自由拼装，就能得到一个自己要想要的玩具。</p><p>或者我们更进一步得说，Container就像是Laravel提供的一个结构精巧的组件，用于处理类的依赖注入、类的自动构建以及类的缓存等等功能。而Application使用了这个组件的同时（Application继承了Container），又定义了很多其他不同的方法，使用这些方法来搭建一个完整的处理http请求的框架。它确实是起到了&quot;胶水&quot;（glue）的作用。</p><p>在Application类中，包含下面这些起粘贴组件作用的属性和方法：</p><p>属性：</p><ul><li><p>当前框架版本号</p></li><li><p>框架所属基础路径</p></li><li><p>是否已经执行过bootstrap方法</p></li><li><p>是否已经执行过boot方法</p></li><li><p>启动中回调事件</p></li><li><p>启动后回调</p></li><li><p>结束回调</p></li><li><p>服务提供者数组</p></li><li><p>已加载服务提供者</p></li><li><p>延迟加载服务提供者</p></li><li><p>app路径</p></li><li><p>database路径</p></li><li><p>自定义存储文件路径</p></li><li><p>配置文件路径</p></li><li><p>配置文件名</p></li><li><p>app命名空间</p></li></ul><p>方法：</p><ul><li>获取当前框架版本号</li><li>注册基础绑定</li><li>注册基础服务提供者</li><li>引导执行bootstrapper数组中事件</li><li>注册加载配置文件后事件</li><li>注册&quot;引导执行bootstrapper事件前&quot;事件</li><li>注册&quot;引导执行bootstrapper事件后&quot;事件</li><li>判断是否执行过bootstrap事件</li><li>设置基础路径</li><li>绑定路径到容器</li><li>获取应用app目录路径</li><li>设置appPath</li><li>获取Laravel应用安装路径</li><li>获取bootstrap目录路径</li><li>获取config目录路径</li><li>获取database目录路径</li><li>设置database目录路径</li><li>获取lang目录路径</li><li>获取public目录路径</li><li>获取storage目录路径</li><li>设置storage目录路径</li><li>获取resouces目录路径</li><li>获取配置文件路径</li><li>设置配置文件路径</li><li>设置配置文件并返回对象application实例</li><li>获取配置文件名</li><li>获取配置文件完整路径（包含文件名）</li><li>获取或者判断当前应用环境</li><li>判断当前是否为local环境</li><li>判断当前是否为production环境</li><li>检测当前环境</li><li>判断当前是否处于命令行</li><li>判断当前是否处于单元测试</li><li>注册已配置服务提供者</li><li>注册服务提供者</li><li>获取对应的服务提供者（存在于已注册服务者成员数组中）</li><li>获取所有已注册服务提供者</li><li>解析一个服务提供者</li><li>标记服务提供者类为已注册</li><li>加载所有延迟服务提供者</li><li>加载指定延迟服务提供者</li><li>注册延迟服务提供者</li><li>解析一个字符串对应的类</li><li>判断给定的字符串是否已绑定</li><li>判断应用是否已启动</li><li>启动应用</li><li>启动服务提供者</li><li>注册启动中监听事件</li><li>注册启动后监听事件</li><li>触发应用回调事件</li><li>判断是否应跳过中间件</li><li>获取services.php缓存文件完整路径</li><li>获取packages.php缓存文件完整路径</li><li>判断应用配置文件是否已缓存</li><li>获取缓存配置文件完整路径</li><li>判断应用路由是否已缓存</li><li>获取缓存路由配置文件完整路径</li><li>判断应用事件是否已缓存</li><li>获取应用缓存事件文件完整路径</li><li>判断当前应用是否处于维护中</li><li>抛出一个http异常</li><li>注册应用结束回调事件</li><li>触发结束回调事件执行</li><li>获取已加载服务提供者</li><li>获取延迟加载服务提供者</li><li>设置延迟加载服务提供者</li><li>添加延迟加载服务提供者</li><li>判断是否是延迟服务提供者</li><li>配置实时facade命名空间</li><li>获取当前应用的locale配置值</li><li>设置当前应用的locale配置值</li><li>判断当前应用配置的locale值是否是给定值</li><li>注册核心别名类</li><li>清空应用中所有的绑定和事件</li><li>获取应用命名空间</li></ul><p>列出上面这个列表，是为了让大家能更直观地感受到，为什么说Application类是Laravel框架中起调度作用的一个核心&quot;胶水&quot;类。</p><p>到这里，这段探寻Laravel生命周期的旅途已到终点。在分析源码的过程中，我们能看到Laravel的底层是使用面向对象的方式经过了复杂封装的，因此很多源码的实现细节我们并不能完全覆盖到，笔者相信阅读过这个系列的文章后你也可以用类似的方式自己去弄懂它们。</p><p>接下来，enjoy coding！</p><p><strong>全文完</strong></p>",15)]))}const c=l(a,[["render",o]]),s=JSON.parse('{"path":"/php/6ws8fhl0/","title":"结束语","lang":"zh-CN","frontmatter":{"title":"结束语","createTime":"2025/07/08 10:34:23","permalink":"/php/6ws8fhl0/","description":"到这里，我们分析完了在php-fpm进程接收到nginx发起一个内部http请求后，Laravel框架是如何完整处理这个请求的。 在nginx阶段，nginx会把所有某个域名下的的http请求都转发给配置文件中定义目录（框架public目录）下的index.php文件，同时指定端口号。这里之所以要指定端口号，是因为在操作系统中，进程是以端口号来区分不同...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"结束语\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-09T01:20:36.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://docs.sreio.com/php/6ws8fhl0/"}],["meta",{"property":"og:site_name","content":"Sreio Docs"}],["meta",{"property":"og:title","content":"结束语"}],["meta",{"property":"og:description","content":"到这里，我们分析完了在php-fpm进程接收到nginx发起一个内部http请求后，Laravel框架是如何完整处理这个请求的。 在nginx阶段，nginx会把所有某个域名下的的http请求都转发给配置文件中定义目录（框架public目录）下的index.php文件，同时指定端口号。这里之所以要指定端口号，是因为在操作系统中，进程是以端口号来区分不同..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-09T01:20:36.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-09T01:20:36.000Z"}]]},"readingTime":{"minutes":4.92,"words":1476},"git":{"createdTime":1751942180000,"updatedTime":1752024036000,"contributors":[{"name":"sreio","username":"sreio","email":"ingwei@163.com","commits":3,"avatar":"https://avatars.githubusercontent.com/sreio?v=4","url":"https://github.com/sreio"}],"changelog":[{"hash":"0b7d61f08c563d6514d6336c56fa0848a69e46eb","time":1752024036000,"email":"ingwei@163.com","author":"sreio","message":"README"},{"hash":"a16a3f8c5e99bfa6f2a99f497d8114454ed414e3","time":1751962383000,"email":"ingwei@163.com","author":"sreio","message":"rename"},{"hash":"7d36c2822e978ef31a2cebd3a69e67c3b9a172e9","time":1751942180000,"email":"ingwei@163.com","author":"sreio","message":"php"}]},"autoDesc":true,"filePathRelative":"php/4.穿透Laravel/11.结束语/README.md","headers":[]}');export{c as comp,s as data};
