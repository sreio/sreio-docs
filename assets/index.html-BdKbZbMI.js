import{_ as s,c as a,e as n,o as t}from"./app-DDsjqNbb.js";const e="/assets/test_12-Dqvvz07D.png",h="/assets/test_13-B3IfX5_m.png",l="/assets/test_14-Wg1VoHZ2.png",p={};function k(d,i){return t(),a("div",null,i[0]||(i[0]=[n(`<h2 id="断点测试" tabindex="-1"><a class="header-anchor" href="#断点测试"><span>断点测试</span></a></h2><p>断点这个概念来源于单步调试，在一次单步调试中，如果设置了一个断点，那么程序在debug的过程中会首先在断点处停下来。什么意思呢，就是说程序会先执行完断点之前的所有代码，在碰到断点所在行时，等待用户执行单步调试。单步调试时，可以跟踪代码中各个变量的值。</p><p>接下来，我们以Dev-C++为例(笔者本机上版本为5.6.3)，给大家详细演示一下一次单步调试的详细步骤。</p><p>首先我们编辑一个test.c文件，源码如下：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdio.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stdlib.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">   int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> dividend </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 20</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">   int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> divisor </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 13</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">   int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> quotient</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">   int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">   </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">   while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">       printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">       i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">   }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">   if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> divisor </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">       fprintf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">stderr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">除数为 0 退出运行...</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">       exit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">   }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">   </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">   quotient </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> dividend </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> divisor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">   fprintf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">stderr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">quotient 变量的值为 : </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> quotient </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">   exit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，在编辑器中，将鼠标定位到下面这一行：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-c"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%d\\n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>按F4键，或者鼠标移到这一行的行号位置(行号是编辑器自动标注出来的)点击鼠标，断点即设置成功。此时，该行会呈现为红色背景，且行首会出现一个红色的勾，如下：</p><figure><img src="`+e+'" alt="" tabindex="0" loading="lazy" width="913" height="706"><figcaption></figcaption></figure><p>【图11.1】</p><p>接下来，我们点击下面的&quot;Add watch&quot;按钮弹出如下对话框：</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy" width="360" height="213"><figcaption></figcaption></figure><p>【图11.2】</p><p>这个对话框，是让我们输入需要监测的变量，在这个代码实例中，我们输入i即可。</p><p>接下来，就可以开始Debug了，单击底部的&quot;Debug&quot;按钮，代码在断点所在行停了下来并且背景色变成了蓝色。同时还弹出了一个命令行的结果窗口。笔者建议您使用一个外接显示器来调试代码，否则在单步调试时，你无法&quot;实时&quot;查看到结果窗中的变化。</p><p>当你给电脑连接上一个外接显示器后，你就可以直接将结果窗拖动到外接显示器上。之后我们点击底部的&quot;Next line&quot;按钮，就开启单步调试代码之旅了。每点击一次按钮，程序就多运行一步(这里的一步对应代码编辑器中的一行)，同时你能清楚地看到代码在循环、分支和顺序结构中的执行次序。并且，在设置了监测变量之后，编辑器左侧的Debug窗口中还会实时显示出变量在每一步代码运行后的值：</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy" width="793" height="529"><figcaption></figcaption></figure><p>【图11.3】</p><p>在PHP中，同样有类似的断点测试工具，但是需要我们先安装php的xdebug扩展，这个过程稍显复杂。</p><h2 id="var-dump中断测试" tabindex="-1"><a class="header-anchor" href="#var-dump中断测试"><span>var_dump中断测试</span></a></h2><p>通常php不会被用来书写包含复杂算法的大块代码，更多的是处理业务逻辑。因此大部分情况下，我们不需要安装xdebug扩展来做单步调试。使用var_dump输出函数，就可以有效完成代码的调试。</p><p>当然使用var_dump函数输出变量内容的同时，必须及时让代码停下来，否则我们可能需要等待程序运行很长时间才能看到输出的内容，而这是完全不必要的。一般我们在var_dump之后，紧跟着使用die或者exit函数就可以了。</p><blockquote><p>注意：这里我们不提倡使用print_r函数，因为print_r输出信息时，不会包含变量的类型信息。比如一个整型的1和一个字符串的1，使用print_r输出时，命令行窗口都是显示1，这在很多情况下是不符合我们的调试需求的。</p></blockquote>',23)]))}const g=s(p,[["render",k]]),c=JSON.parse('{"path":"/php/c85ojydd/","title":"附录一：断点测试和中断测试","lang":"zh-CN","frontmatter":{"title":"附录一：断点测试和中断测试","createTime":"2025/07/08 10:34:23","permalink":"/php/c85ojydd/","description":"断点测试 断点这个概念来源于单步调试，在一次单步调试中，如果设置了一个断点，那么程序在debug的过程中会首先在断点处停下来。什么意思呢，就是说程序会先执行完断点之前的所有代码，在碰到断点所在行时，等待用户执行单步调试。单步调试时，可以跟踪代码中各个变量的值。 接下来，我们以Dev-C++为例(笔者本机上版本为5.6.3)，给大家详细演示一下一次单步调...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"附录一：断点测试和中断测试\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-09T01:20:36.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://docs.sreio.com/php/c85ojydd/"}],["meta",{"property":"og:site_name","content":"Sreio Docs"}],["meta",{"property":"og:title","content":"附录一：断点测试和中断测试"}],["meta",{"property":"og:description","content":"断点测试 断点这个概念来源于单步调试，在一次单步调试中，如果设置了一个断点，那么程序在debug的过程中会首先在断点处停下来。什么意思呢，就是说程序会先执行完断点之前的所有代码，在碰到断点所在行时，等待用户执行单步调试。单步调试时，可以跟踪代码中各个变量的值。 接下来，我们以Dev-C++为例(笔者本机上版本为5.6.3)，给大家详细演示一下一次单步调..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-09T01:20:36.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-09T01:20:36.000Z"}]]},"readingTime":{"minutes":3.19,"words":957},"git":{"createdTime":1751942180000,"updatedTime":1752024036000,"contributors":[{"name":"sreio","username":"sreio","email":"ingwei@163.com","commits":3,"avatar":"https://avatars.githubusercontent.com/sreio?v=4","url":"https://github.com/sreio"}],"changelog":[{"hash":"0b7d61f08c563d6514d6336c56fa0848a69e46eb","time":1752024036000,"email":"ingwei@163.com","author":"sreio","message":"README"},{"hash":"a16a3f8c5e99bfa6f2a99f497d8114454ed414e3","time":1751962383000,"email":"ingwei@163.com","author":"sreio","message":"rename"},{"hash":"7d36c2822e978ef31a2cebd3a69e67c3b9a172e9","time":1751942180000,"email":"ingwei@163.com","author":"sreio","message":"php"}]},"autoDesc":true,"filePathRelative":"php/4.穿透Laravel/12.附录一：断点测试和中断测试/README.md","headers":[]}');export{g as comp,c as data};
