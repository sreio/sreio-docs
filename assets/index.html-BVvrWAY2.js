import{_ as d,c,e as n,b as t,d as o,a,w as i,r as s,o as l}from"./app-DDsjqNbb.js";const p="/assets/1-1-Avdipmre.png",g="/assets/1-2-CwLy35s2.png",h={};function k(f,e){const r=s("VPLink");return l(),c("div",null,[e[12]||(e[12]=n('<h2 id="什么是-docker" tabindex="-1"><a class="header-anchor" href="#什么是-docker"><span>什么是 Docker</span></a></h2><p><strong>Docker</strong> 最初是 <code>dotCloud</code> 公司创始人 <a href="https://github.com/shykes" target="_blank" rel="noopener noreferrer">Solomon Hykes</a> 在法国期间发起的一个公司内部项目，它是基于 <code>dotCloud</code> 公司多年云服务技术的一次革新，并于 <a href="https://en.wikipedia.org/wiki/Docker_(software)" target="_blank" rel="noopener noreferrer">2013 年 3 月以 Apache 2.0 授权协议开源</a>，主要项目代码在 <a href="https://github.com/moby/moby" target="_blank" rel="noopener noreferrer">GitHub</a> 上进行维护。<code>Docker</code> 项目后来还加入了 Linux 基金会，并成立推动 <a href="https://opencontainers.org/" target="_blank" rel="noopener noreferrer">开放容器联盟（OCI）</a>。</p><p><strong>Docker</strong> 自开源后受到广泛的关注和讨论，至今其 <a href="https://github.com/moby/moby" target="_blank" rel="noopener noreferrer">GitHub 项目</a> 已经超过 5 万 7 千个星标和一万多个 <code>fork</code>。甚至由于 <code>Docker</code> 项目的火爆，在 <code>2013</code> 年底，<a href="https://www.docker.com/blog/dotcloud-is-becoming-docker-inc/" target="_blank" rel="noopener noreferrer">dotCloud 公司决定改名为 Docker</a>。<code>Docker</code> 最初是在 <code>Ubuntu 12.04</code> 上开发实现的；<code>Red Hat</code> 则从 <code>RHEL 6.5</code> 开始对 <code>Docker</code> 进行支持；<code>Google</code> 也在其 <code>PaaS</code> 产品中广泛应用 <code>Docker</code>。</p><p><strong>Docker</strong> 使用 <code>Google</code> 公司推出的 <a href="https://golang.google.cn/" target="_blank" rel="noopener noreferrer">Go 语言</a> 进行开发实现，基于 <code>Linux</code> 内核的 <a href="https://zh.wikipedia.org/wiki/Cgroups" target="_blank" rel="noopener noreferrer">cgroup</a>，<a href="https://en.wikipedia.org/wiki/Linux_namespaces" target="_blank" rel="noopener noreferrer">namespace</a>，以及 <a href="https://docs.docker.com/storage/storagedriver/overlayfs-driver/" target="_blank" rel="noopener noreferrer">OverlayFS</a> 类的 <a href="https://en.wikipedia.org/wiki/Union_mount" target="_blank" rel="noopener noreferrer">Union FS</a> 等技术，对进程进行封装隔离，属于 <a href="https://en.wikipedia.org/wiki/Operating-system-level_virtualization" target="_blank" rel="noopener noreferrer">操作系统层面的虚拟化技术</a>。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。最初实现是基于 <a href="https://linuxcontainers.org/lxc/introduction/" target="_blank" rel="noopener noreferrer">LXC</a>，从 <code>0.7</code> 版本以后开始去除 <code>LXC</code>，转而使用自行开发的 <a href="https://github.com/docker/libcontainer" target="_blank" rel="noopener noreferrer">libcontainer</a>，从 <code>1.11</code> 版本开始，则进一步演进为使用 <a href="https://github.com/opencontainers/runc" target="_blank" rel="noopener noreferrer">runC</a> 和 <a href="https://github.com/containerd/containerd" target="_blank" rel="noopener noreferrer">containerd</a>。</p><figure><img src="https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/media/docker-on-linux.png" alt="Docker 架构" tabindex="0" loading="lazy"><figcaption>Docker 架构</figcaption></figure><blockquote><p><code>runc</code> 是一个 Linux 命令行工具，用于根据 <a href="https://github.com/opencontainers/runtime-spec" target="_blank" rel="noopener noreferrer">OCI容器运行时规范</a> 创建和运行容器。</p></blockquote><blockquote><p><code>containerd</code> 是一个守护程序，它管理容器生命周期，提供了在一个节点上执行容器和管理镜像的最小功能集。</p></blockquote><p><strong>Docker</strong> 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 <code>Docker</code> 技术比虚拟机技术更为轻便、快捷。</p><p>下面的图片比较了 <strong>Docker</strong> 和传统虚拟化方式的不同之处。传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</p><figure><img src="'+p+'" alt="传统虚拟化" tabindex="0" loading="lazy" width="692" height="261"><figcaption>传统虚拟化</figcaption></figure><figure><img src="'+g+'" alt="Docker" tabindex="0" loading="lazy" width="689" height="195"><figcaption>Docker</figcaption></figure><hr><h2 id="为什么要使用-docker" tabindex="-1"><a class="header-anchor" href="#为什么要使用-docker"><span>为什么要使用 Docker？</span></a></h2><p>作为一种新兴的虚拟化方式，<code>Docker</code> 跟传统的虚拟化方式相比具有众多的优势。</p><h3 id="更高效的利用系统资源" tabindex="-1"><a class="header-anchor" href="#更高效的利用系统资源"><span>更高效的利用系统资源</span></a></h3><p>由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，<code>Docker</code> 对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</p><h3 id="更快速的启动时间" tabindex="-1"><a class="header-anchor" href="#更快速的启动时间"><span>更快速的启动时间</span></a></h3><p>传统的虚拟机技术启动应用服务往往需要数分钟，而 <code>Docker</code> 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。</p><h3 id="一致的运行环境" tabindex="-1"><a class="header-anchor" href="#一致的运行环境"><span>一致的运行环境</span></a></h3><p>开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug 并未在开发过程中被发现。而 <code>Docker</code> 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 <em>「这段代码在我机器上没问题啊」</em> 这类问题。</p><h3 id="持续交付和部署" tabindex="-1"><a class="header-anchor" href="#持续交付和部署"><span>持续交付和部署</span></a></h3><p>对开发和运维（<a href="https://zh.wikipedia.org/wiki/DevOps" target="_blank" rel="noopener noreferrer">DevOps</a>）人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。</p>',22)),t("p",null,[e[1]||(e[1]=o("使用 ")),e[2]||(e[2]=t("code",null,"Docker",-1)),e[3]||(e[3]=o(" 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 ")),a(r,{href:"../image/dockerfile/"},{default:i(()=>e[0]||(e[0]=[o("Dockerfile")])),_:1,__:[0]}),e[4]||(e[4]=o(" 来进行镜像构建，并结合 ")),e[5]||(e[5]=t("a",{href:"https://en.wikipedia.org/wiki/Continuous_integration",target:"_blank",rel:"noopener noreferrer"},"持续集成(Continuous Integration)",-1)),e[6]||(e[6]=o(" 系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 ")),e[7]||(e[7]=t("a",{href:"https://en.wikipedia.org/wiki/Continuous_delivery",target:"_blank",rel:"noopener noreferrer"},"持续部署(Continuous Delivery/Deployment)",-1)),e[8]||(e[8]=o(" 系统进行自动部署。"))]),t("p",null,[e[10]||(e[10]=o("而且使用 ")),a(r,{href:"../image/build.md"},{default:i(()=>e[9]||(e[9]=[t("code",null,"Dockerfile",-1)])),_:1,__:[9]}),e[11]||(e[11]=o(" 使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。"))]),e[13]||(e[13]=n('<h3 id="更轻松的迁移" tabindex="-1"><a class="header-anchor" href="#更轻松的迁移"><span>更轻松的迁移</span></a></h3><p>由于 <code>Docker</code> 确保了执行环境的一致性，使得应用的迁移更加容易。<code>Docker</code> 可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。</p><h3 id="更轻松的维护和扩展" tabindex="-1"><a class="header-anchor" href="#更轻松的维护和扩展"><span>更轻松的维护和扩展</span></a></h3><p><code>Docker</code> 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，<code>Docker</code> 团队同各个开源项目团队一起维护了一大批高质量的 <a href="https://hub.docker.com/search/?type=image&amp;image_filter=official" target="_blank" rel="noopener noreferrer">官方镜像</a>，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</p><h3 id="对比传统虚拟机总结" tabindex="-1"><a class="header-anchor" href="#对比传统虚拟机总结"><span>对比传统虚拟机总结</span></a></h3><table><thead><tr><th style="text-align:left;">特性</th><th style="text-align:left;">容器</th><th style="text-align:left;">虚拟机</th></tr></thead><tbody><tr><td style="text-align:left;">启动</td><td style="text-align:left;">秒级</td><td style="text-align:left;">分钟级</td></tr><tr><td style="text-align:left;">硬盘使用</td><td style="text-align:left;">一般为 <code>MB</code></td><td style="text-align:left;">一般为 <code>GB</code></td></tr><tr><td style="text-align:left;">性能</td><td style="text-align:left;">接近原生</td><td style="text-align:left;">弱于</td></tr><tr><td style="text-align:left;">系统支持量</td><td style="text-align:left;">单机支持上千个容器</td><td style="text-align:left;">一般几十个</td></tr></tbody></table>',6))])}const m=d(h,[["render",k]]),b=JSON.parse('{"path":"/linux/Docker%E7%AE%80%E4%BB%8B/","title":"Docker简介","lang":"zh-CN","frontmatter":{"title":"Docker简介","createTime":"2025/07/07 15:38:56","permalink":"/linux/Docker简介/","description":"什么是 Docker Docker 最初是 dotCloud 公司创始人 Solomon Hykes 在法国期间发起的一个公司内部项目，它是基于 dotCloud 公司多年云服务技术的一次革新，并于 2013 年 3 月以 Apache 2.0 授权协议开源，主要项目代码在 GitHub 上进行维护。Docker 项目后来还加入了 Linux 基金会，...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker简介\\",\\"image\\":[\\"https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/media/docker-on-linux.png\\"],\\"dateModified\\":\\"2025-07-07T08:09:54.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://docs.sreio.com/linux/Docker%E7%AE%80%E4%BB%8B/"}],["meta",{"property":"og:site_name","content":"Sreio Docs"}],["meta",{"property":"og:title","content":"Docker简介"}],["meta",{"property":"og:description","content":"什么是 Docker Docker 最初是 dotCloud 公司创始人 Solomon Hykes 在法国期间发起的一个公司内部项目，它是基于 dotCloud 公司多年云服务技术的一次革新，并于 2013 年 3 月以 Apache 2.0 授权协议开源，主要项目代码在 GitHub 上进行维护。Docker 项目后来还加入了 Linux 基金会，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/media/docker-on-linux.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-07T08:09:54.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-07T08:09:54.000Z"}]]},"readingTime":{"minutes":5.28,"words":1585},"git":{"createdTime":1751875794000,"updatedTime":1751875794000,"contributors":[{"name":"sreio","username":"sreio","email":"ingwei@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/sreio?v=4","url":"https://github.com/sreio"}],"changelog":[{"hash":"309568ac808a0e32f2a30faf8785a5bb75211f52","time":1751875794000,"email":"ingwei@163.com","author":"sreio","message":"docker"}]},"autoDesc":true,"filePathRelative":"linux/7.Docker-从入门到实践/1.Docker简介.md","headers":[]}');export{m as comp,b as data};
