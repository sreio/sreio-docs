import{_ as o}from"./1_1-DH_LRomf.js";import{_ as i,c as d,e as c,o as s}from"./app-DDsjqNbb.js";const a="/assets/1_3-7cEE6ysl.png",n="/assets/1_4-DOlLah-Y.png",l={};function t(p,e){return s(),d("div",null,e[0]||(e[0]=[c(`<p>我们还是从一个表的一条更新语句说起，下面是这个表的创建语句，这个表有一个主键ID和一个整型字段c：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">create</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> table</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> T</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(ID </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> primary key</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, c </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">insert into</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> T(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">c</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">value</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">),(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">//</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">如果要将ID</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">2这一行的值加1，SQL语句就会这么写</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">update</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> T </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> c</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">c</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> where</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ID</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，可以确定的说，查询语句的那一套流程，更新语句也是同样会走一遍。</p><figure><img src="`+o+'" alt="1-1" tabindex="0" loading="lazy" width="1346" height="1008"><figcaption>1-1</figcaption></figure><h2 id="_1-sql执行过程" tabindex="-1"><a class="header-anchor" href="#_1-sql执行过程"><span>1.SQL执行过程</span></a></h2><ol><li>首先经过连接器</li><li>在一个表上有更新的时候，跟这个表有关的查询缓存会失效，所以这条语句就会把表T上所有缓存结果都清空。</li><li>分析器会通过词法和语法解析知道这是一条更新语句。优化器决定要使用ID这个索引。然后，执行器负责具体执行，找到这一行，然后更新。</li></ol><div class="hint-container tip"><p class="hint-container-title">与查询流程不一样的是，更新流程还涉及两个重要的日志模块，它们正是我们今天要讨论的主角：<code>redo log</code>（重做日志）和 <code>binlog</code>（归档日志）。</p></div><h2 id="_2-日志模块-redo-log" tabindex="-1"><a class="header-anchor" href="#_2-日志模块-redo-log"><span>2.日志模块(redo log)</span></a></h2><div class="hint-container tip"><p class="hint-container-title"><code>redo log</code>是<code>InnoDB</code>引擎特有的日志</p></div><p><code>WAL</code>的全称是<code>Write-Ahead Logging</code>，它的关键点就是<code>先写日志</code>，<code>再写磁盘</code>，等系统不忙的时候再写入磁盘。</p><p>具体来说，当有一条记录需要更新的时候，<code>InnoDB</code>引擎就会先把记录写到<code>redo log（粉板）</code>里面，并更新内存，这个时候更新就算完成了。同时，<code>InnoDB</code>引擎会在适当的时候，将这个操作记录更新到<code>磁盘</code>里面，而这个更新往往是在系统比较空闲的时候做.</p><p><code>InnoDB</code>的<code>redo log</code>是固定大小的，比如可以配置为一组4个文件，每个文件的大小是<code>1GB</code>，那么就可以记录<code>4GB</code>的操作。从头开始写，写到末尾就又回到开头循环写，如下面这个图所示。</p><figure><img src="'+a+'" alt="1-3" tabindex="0" loading="lazy" width="1142" height="656"><figcaption>:size=60%</figcaption></figure><p><code>write pos</code>是当前记录的位置，一边写一边后移，写到第3号文件末尾后就回到0号文件开头。</p><p><code>checkpoint</code>是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。</p><div class="hint-container tip"><p class="hint-container-title"><code>write pos</code>和<code>checkpoint</code>之间的部分，可以用来记录新的操作。如果<code>write pos</code> 追上<code>checkpoint</code>，表示<code>redo log</code> 满载了，这时候不能再执行新的更新，得停下来先擦掉一些记录，把<code>checkpoint</code>推进一下。</p></div><p>有了<code>redo log</code>，<code>InnoDB</code>就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为<code>crash-safe</code>。</p><h2 id="_3-归档日志-binlog" tabindex="-1"><a class="header-anchor" href="#_3-归档日志-binlog"><span>3.归档日志(binlog)</span></a></h2><div class="hint-container tip"><p class="hint-container-title"><code>binlog</code>是<code>Server</code>层特有的日志</p></div><p>为什么会有两份日志呢？因为最开始<code>MySQL</code>里并没有<code>InnoDB</code>引擎。</p><p><code>MySQL</code>自带的引擎是<code>MyISAM</code>，但是<code>MyISAM</code>没有<code>crash-safe</code>的能力，<code>binlog</code>日志只能用于<code>归档</code>。</p><p>而<code>InnoDB</code>是另一个公司以插件形式引入<code>MySQL</code>的，既然只依靠<code>binlog</code>是没有<code>crash-safe</code>能力的，所以<code>InnoDB</code>使用另外一套日志系统,也就是<code>redo log</code>来实现<code>crash-safe</code>能力</p><p>这两种日志有以下三点不同:</p><ol><li><code>redo log</code>是<code>InnoDB</code>引擎特有的；<code>binlog</code>是<code>MySQL</code>的<code>Server</code>层实现的，所有引擎都可以使用。</li><li><code>redo log</code>是<code>物理日志</code>，记录的是“在某个数据页上做了什么修改”；<code>binlog</code>是<code>逻辑日志</code>，记录的是这个语句的<code>原始逻辑</code>，比如“给ID=2这一行的c字段加1 ”。</li><li><code>redo log</code>是循环写的，空间固定会用完；<code>binlog</code>是可以追加写入的。“追加写”是指<code>binlog</code>文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</li></ol><h2 id="_4-sql内部流程" tabindex="-1"><a class="header-anchor" href="#_4-sql内部流程"><span>4.SQL内部流程</span></a></h2><ol><li><code>执行器</code>先找引擎取ID=2这一行。ID是主键，引擎直接用<code>树</code>搜索找到这一行。如果ID=2这一行所在的<code>数据页</code>本来就在<code>内存</code>中，就直接返回给<code>执行器</code>；否则，需要先从<code>磁盘</code>读入<code>内存</code>，然后再返回。</li><li><code>执行器</code>拿到<code>引擎</code>给的<code>行数据</code>，把这个值加上1，比如原来是N，现在就是N+1，得到新的一行数据，再调用引擎接口写入这行新数据</li><li>引擎将这行新数据更新到内存中，同时将这个更新操作记录到<code>redo log</code>里面，此时<code>redo log</code>处于<code>prepare</code>状态。然后告知<code>执行器</code>执行完成了，随时可以提交事务。</li><li><code>执行器</code>生成这个操作的<code>binlog</code>，并把<code>binlog</code>写入<code>磁盘</code>。</li><li><code>执行器</code>调用引擎的提交事务接口，引擎把刚刚写入的<code>redo log</code>改成提交（commit）状态，更新完成。</li></ol><p>update语句的执行流程图，图中<code>浅色框</code>表示是在InnoDB内部执行的，<code>深色框</code>表示是在执行器中执行的。</p><figure><img src="'+n+'" alt="1-1" tabindex="0" loading="lazy" width="1142" height="1522"><figcaption>:size=60%</figcaption></figure><p>最后三步看上去有点“绕”，将<code>redo log</code>的写入拆成了两个步骤：<code>prepare</code>和<code>commit</code>，这就是&quot;<code>两阶段提交</code>&quot;</p><h5 id="两阶段提交" tabindex="-1"><a class="header-anchor" href="#两阶段提交"><span>两阶段提交</span></a></h5><p>怎样让数据库恢复到半个月内任意一秒的状态？</p><p>当需要恢复到指定的某一秒时，比如某天下午两点发现中午十二点有一次误删表，需要找回数据，那你可以这么做：</p><ul><li>首先，找到最近的一次全量备份，如果你运气好，可能就是昨天晚上的一个备份，从这个备份恢复到临时库；</li><li>然后，从备份的时间点开始，将备份的<code>binlog</code>依次取出来，重放到中午误删表之前的那个时刻。</li></ul><p>这样你的临时库就跟误删之前的线上库一样了，然后你可以把表数据从临时库取出来，按需要恢复到线上库去</p><p>...</p><p>由于<code>redo log</code>和<code>binlog</code>是两个独立的逻辑，如果不用两阶段提交，要么就是先写完<code>redo log</code>再写<code>binlog</code>，或者采用反过来的顺序。我们看看这两种方式会有什么问题。</p><p>仍然用前面的update语句来做例子。假设当前ID=2的行，字段c的值是0，再假设执行update语句过程中在写完第一个日志后，第二个日志还没有写完期间发生了crash，会出现什么情况呢？</p><ol><li>先写<code>redo log</code>后写<code>binlog</code>。假设在<code>redo log</code>写完，<code>binlog</code>还没有写完的时候，<code>MySQL</code>进程异常重启。由于我们前面说过的，<code>redo log</code>写完之后，系统即使崩溃，仍然能够把数据恢复回来，所以恢复后这一行c的值是1。</li></ol><p>但是由于<code>binlog</code>没写完就<code>crash</code>了，这时候<code>binlog</code>里面就没有记录这个语句。因此，之后备份日志的时候，存起来的<code>binlog</code>里面就没有这条语句。</p><p>然后你会发现，如果需要用这个<code>binlog</code>来恢复临时库的话，由于这个语句的<code>binlog</code>丢失，这个临时库就会少了这一次更新，恢复出来的这一行c的值就是0，与原库的值不同。</p><ol start="2"><li>先写<code>binlog</code>后写<code>redo log</code>。如果在<code>binlog</code>写完之后<code>crash</code>，由于<code>redo log</code>还没写，崩溃恢复以后这个事务无效，所以这一行c的值是0。但是<code>binlog</code>里面已经记录了“把c从0改成1”这个日志。所以，在之后用<code>binlog</code>来恢复的时候就多了一个事务出来，恢复出来的这一行c的值就是1，与原库的值不同。</li></ol><p>可以看到，如果不使用“两阶段提交”，那么数据库的状态就有可能和用它的日志恢复出来的库的状态不一致。</p><p>你可能会说，这个概率是不是很低，平时也没有什么动不动就需要恢复临时库的场景呀？</p><p>其实不是的，不只是误操作后需要用这个过程来恢复数据。当你需要扩容的时候，也就是需要再多搭建一些备库来增加系统的读能力的时候，现在常见的做法也是用全量备份加上应用<code>binlog</code>来实现的，这个“不一致”就会导致你的线上出现主从数据库不一致的情况。</p><p>简单说，<code>redo log</code>和<code>binlog</code>都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p><code>redo log</code>用于保证<code>crash-safe</code>能力。<code>innodb_flush_log_at_trx_commit</code>这个参数设置成<code>1</code>的时候，表示每次事务的<code>redo log</code>都直接<code>持久化</code>到<code>磁盘</code>。这个参数我建议你设置成<code>1</code>，这样可以保证<code>MySQL</code>异常重启之后数据不丢失。</p><p><code>sync_binlog</code>这个参数设置成<code>1</code>的时候，表示每次事务的<code>binlog</code>都持久化到磁盘。这个参数我也建议你设置成<code>1</code>，这样可以保证<code>MySQL</code>异常重启之后<code>binlog</code>不丢失。</p>',48)]))}const g=i(l,[["render",t]]),k=JSON.parse('{"path":"/mysql/Mysql45%E8%AE%B2/sql_update/","title":"一条SQL更新语句是如何执行的？","lang":"zh-CN","frontmatter":{"title":"一条SQL更新语句是如何执行的？","createTime":"2025/07/07 17:59:15","permalink":"/mysql/Mysql45讲/sql_update/","description":"我们还是从一个表的一条更新语句说起，下面是这个表的创建语句，这个表有一个主键ID和一个整型字段c： 首先，可以确定的说，查询语句的那一套流程，更新语句也是同样会走一遍。 1-11-1 1.SQL执行过程 首先经过连接器 在一个表上有更新的时候，跟这个表有关的查询缓存会失效，所以这条语句就会把表T上所有缓存结果都清空。 分析器会通过词法和语法解析知道这是...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"一条SQL更新语句是如何执行的？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-14T03:14:18.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://docs.sreio.com/mysql/Mysql45%E8%AE%B2/sql_update/"}],["meta",{"property":"og:site_name","content":"Sreio Docs"}],["meta",{"property":"og:title","content":"一条SQL更新语句是如何执行的？"}],["meta",{"property":"og:description","content":"我们还是从一个表的一条更新语句说起，下面是这个表的创建语句，这个表有一个主键ID和一个整型字段c： 首先，可以确定的说，查询语句的那一套流程，更新语句也是同样会走一遍。 1-11-1 1.SQL执行过程 首先经过连接器 在一个表上有更新的时候，跟这个表有关的查询缓存会失效，所以这条语句就会把表T上所有缓存结果都清空。 分析器会通过词法和语法解析知道这是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-14T03:14:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-14T03:14:18.000Z"}]]},"readingTime":{"minutes":7.73,"words":2318},"git":{"createdTime":1751885168000,"updatedTime":1752462858000,"contributors":[{"name":"sreio","username":"sreio","email":"ingwei@163.com","commits":2,"avatar":"https://avatars.githubusercontent.com/sreio?v=4","url":"https://github.com/sreio"}],"changelog":[{"hash":"392e0717075550911bee8967562578d34bf94c89","time":1752462858000,"email":"ingwei@163.com","author":"sreio","message":"updated: fixed tip"},{"hash":"c1ab990bb57919c348cc77b4236368714def9959","time":1751885168000,"email":"ingwei@163.com","author":"sreio","message":"elk&#x26;clickhouse&#x26;redis&#x26;mongdb&#x26;etcd"}]},"autoDesc":true,"filePathRelative":"mysql/2.Mysql45讲/2.sql_update.md","headers":[]}');export{g as comp,k as data};
