import{_ as e,c as h,e as a,b as i,d as n,a as p,r as t,o as k}from"./app-DDsjqNbb.js";const d={};function r(c,s){const l=t("VPIcon");return k(),h("div",null,[s[3]||(s[3]=a(`<h2 id="一、-面向对象基本知识" tabindex="-1"><a class="header-anchor" href="#一、-面向对象基本知识"><span>一、 面向对象基本知识</span></a></h2><h3 id="_1-1-什么是类" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是类"><span>1.1 什么是类</span></a></h3><ul><li><p>类是事物相关属性特征和行为特征的集合。</p><ul><li><p>属性特征: 就是该事物的状态。比如： 用户性别、用户的身高。</p></li><li><p>行为特征: 就是该事物能够做什么。比如： 用户下单、用户评论。</p></li></ul></li><li><p>⚠️ 注意</p><ul><li><p>属性特征在类中被称为： 成员属性或成员变量</p></li><li><p>行为特征在类中被称为： 成员方法</p></li></ul></li></ul><h3 id="_1-2-什么是对象" tabindex="-1"><a class="header-anchor" href="#_1-2-什么是对象"><span>1.2 什么是对象</span></a></h3><ul><li>对象是客户存在的一个实例，是事物的具体实现。可以通过对象调用类的属性 与 行为。</li></ul><h3 id="_1-3-类与对象的关系" tabindex="-1"><a class="header-anchor" href="#_1-3-类与对象的关系"><span>1.3 类与对象的关系</span></a></h3><ul><li>类是对对象抽象的一个描述</li><li>对象是客观存在的一个实体</li></ul><h3 id="_1-4-php创建类的示例" tabindex="-1"><a class="header-anchor" href="#_1-4-php创建类的示例"><span>1.4 PHP创建类的示例</span></a></h3><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-php"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;?</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">php</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    # 类: 创建名为 Car 的类</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Car</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">	{</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    	# 成员属性</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    	public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> $</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">default_config</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    	static</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> $</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">default_name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    	# 成员方法</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    	public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> get_config</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 需要完成的功能</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    	static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> get_name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 需要完成的功能</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	# 对象: $car_obj 就是 Car 类的一个实例</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	# 对象 = new 类名();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">	$</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">car_obj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> Car</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	# static 静态修饰符访问示例</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        # 格式: 类名::属性名 , 示例: </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        $</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">default_name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> Car</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">default_name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        # 格式: 类名::方法名 , 示例: </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        $</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> Car</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">get_name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        # 格式: $对象名-&gt;静态属性名 , 示例:</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        $</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">default_name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> $</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">car_obj</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">default_name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        # 格式: $对象名-&gt;静态方法名 , 示例:</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        $</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =$</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">car_obj</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">get_name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、-类、属性、方法的修饰符" tabindex="-1"><a class="header-anchor" href="#二、-类、属性、方法的修饰符"><span>二、 类、属性、方法的修饰符</span></a></h2><h3 id="_2-1-类的修饰符" tabindex="-1"><a class="header-anchor" href="#_2-1-类的修饰符"><span>2.1 类的修饰符</span></a></h3><ul><li>类的修饰符有: <code>abstract</code>、<code>final</code>、<code>interface</code>、<code>trait</code></li></ul><h3 id="_2-2-成员方法的修饰符" tabindex="-1"><a class="header-anchor" href="#_2-2-成员方法的修饰符"><span>2.2 成员方法的修饰符</span></a></h3><ul><li>成员方法的修饰符有: <code>public</code>、<code>protected</code>、<code>private</code>、<code>static</code>、<code>abstract</code>、<code>final</code></li></ul><h3 id="_2-3-成员属性修饰符" tabindex="-1"><a class="header-anchor" href="#_2-3-成员属性修饰符"><span>2.3 成员属性修饰符</span></a></h3><ul><li>属性修饰符有: public、protected、private、static、var</li><li>var 与 public 作用相同, var 是 public 的别名。</li></ul><h3 id="_2-4-static-静态修饰符" tabindex="-1"><a class="header-anchor" href="#_2-4-static-静态修饰符"><span>2.4 static 静态修饰符</span></a></h3><p>示例请看上边<code>1.5</code>的代码</p><ul><li><p><code>static</code> 静态修饰符 : 用于修饰类的成员属性和成员方法 。</p></li><li><p><code>static</code> 关键字 : 修饰的成员方法称为静态方法，修饰的成员属性称为静态属性。</p></li></ul><p>调用方法:</p><ol><li>可以不用 new（实例化）就可以直接调用, 格式 类名::属性名</li><li>静态方法在实例化后的对象也可以访问, 格式 对象名-&gt;属性名</li></ol><p>⚠️注意:</p>`,22)),i("ol",null,[s[2]||(s[2]=i("li",null,"在静态方法中不可以使用非静态的内容。就是不让使用 $this",-1)),i("li",null,[s[0]||(s[0]=n("在类的方法中可以使用其他静态属性和静态方法，不过要使用self关键字，如 self")),p(l,{provider:"iconify",name:"静态属性名",extra:"self f"}),s[1]||(s[1]=n("静态方法名"))])]),s[4]||(s[4]=a(`<h3 id="_2-5-final-修饰符" tabindex="-1"><a class="header-anchor" href="#_2-5-final-修饰符"><span>2.5 final 修饰符</span></a></h3><ul><li><p>类使用时: 如果类使用 final关键字修饰时 ，表示这个类不可以有子类，即不能被 继承。</p></li><li><p>成员方法使用时: 如果成员方法 使用 final 关键字修饰时，表示这个成员方法不可以在子类中被覆盖，即不能被 重写。</p></li></ul><h3 id="_2-6-abstract-抽象修饰符" tabindex="-1"><a class="header-anchor" href="#_2-6-abstract-抽象修饰符"><span>2.6 abstract 抽象修饰符</span></a></h3><p>类使用时:</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-php"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;?</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">php</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	abstract</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ClassName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">		public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> functionName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">	}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>抽象类中的成员方法没有方法体，以 (); 结束。</li><li>该类不能被实例化</li><li>若想使用抽象类，就必须定义一个类去继承这个抽象类，并定义覆盖父类的抽象方法(实现抽象方法)。</li></ol><h3 id="_2-7-interface-接口修饰符" tabindex="-1"><a class="header-anchor" href="#_2-7-interface-接口修饰符"><span>2.7 interface 接口修饰符</span></a></h3><ul><li>假如一个抽象类中所有的方法都是抽象的，那么我们可以使用另外一种方式定义：接口。</li><li>接口使用关键字interface来定义，接口中只能有常量与抽象方法。</li></ul><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-php"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;?</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">php</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   # 接口定义格式：</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">   interface</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> interfaceName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   	# 常量定义</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">   	const</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> USERLEVEL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">TOP</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   	# 抽象方法定义, 注意抽象方法不需要有 abstract 关键字, 且以 (); 结尾</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">   	function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> funName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">   }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-php"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;?</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">php</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   # 接口实现, 定义一个类, 使用 implements 关键字实现</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">   class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> 类名</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> implements</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> 接口名1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> 接口名2</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">   {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   	# 必须将 接口 中的所有方法全部重写实现</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">   }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、-面向对象三大特性" tabindex="-1"><a class="header-anchor" href="#三、-面向对象三大特性"><span>三、 面向对象三大特性</span></a></h2><ul><li>三大特性: 封装、继承、多态。</li></ul><h3 id="_3-1-封装" tabindex="-1"><a class="header-anchor" href="#_3-1-封装"><span>3.1 封装</span></a></h3><ul><li>我理解的 封装 就是 类的定义, 将事物相关属性特征和行为特征的集合在一起，形成一个 类，这就是封装。</li></ul><h3 id="_3-2-继承" tabindex="-1"><a class="header-anchor" href="#_3-2-继承"><span>3.2 继承</span></a></h3><ul><li>继承 顾名思义就是 B类 继承 A类，继承后， B类 就可以调用访问 A类 非私有的成员属性与成员方法。通过继承创建的类被称为 “子类” 或 “派生类”。被继承的类称为 “基类” 或 “父类”。</li></ul><p>⚠️ PHP 通过 extends 关键字继承，且一个类只能继承一个父类。</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-php"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;?</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">php</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    # 父类</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> A</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	# 子类</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> B</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> A</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-多态" tabindex="-1"><a class="header-anchor" href="#_3-3-多态"><span>3.3 多态</span></a></h3><ul><li>我理解的多态就是: 同一个方法，传入不同的对象，实现不同的效果。</li></ul><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-php"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;?</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">php</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 注意: 该部分代码没有实际运行, 不保证运行结果可以成功。</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 但是这个逻辑。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> BuyCar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">		function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> buyFunc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">($</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">obj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">         if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ($</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">obj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> instanceof</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> Car</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">             $</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">obj</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">buy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">         }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> else</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">             echo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">No Buy</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">         }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">     }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	/**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	 * 定义 Car 接口</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	 */</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	interface</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Car</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> buy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	/**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	 * 定义奔驰类</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	 */</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Benz</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> implements</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Car</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> buy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">            echo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Benz buy</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	/**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	 * 定义宝马类</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	 */</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Bmw</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> implements</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Car</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> buy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">            echo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Bmw buy</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	# 实例化 BuyCar 类</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">	$</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">BuyCar_obj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> BuyCar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	# 调用 buyFunc</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">	$</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">BuyCar_obj</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">buyFunc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">new</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> Benz</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">	$</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">BuyCar_obj</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">buyFunc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">new</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> Bmw</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、-面向对象的七大原则" tabindex="-1"><a class="header-anchor" href="#四、-面向对象的七大原则"><span>四、 面向对象的七大原则</span></a></h2><pre><code>单一职责原则、开放封闭原则、里式替换原则、依赖倒置原则、接口隔离原则、迪米特原则、合成/聚合复用原则
</code></pre><h3 id="_4-1-单一职责原则" tabindex="-1"><a class="header-anchor" href="#_4-1-单一职责原则"><span>4.1 单一职责原则</span></a></h3><ul><li><p>单一职责原则(Single Responsibility Principle，SRP): 一个类应仅有一个职责。</p></li><li><p>通俗的讲就是一个类当中的所有成员方法完成的工作相关性是相同的。</p></li><li><p>例: 一个类不能即完成用户的注册, 又完成商品的购买。</p></li></ul><h3 id="_4-2-开放封闭原则" tabindex="-1"><a class="header-anchor" href="#_4-2-开放封闭原则"><span>4.2 开放封闭原则</span></a></h3><ul><li><p>开放封装原则(Open-Closed Principle，OCP): 即对扩展开放对修改关闭。</p></li><li><p>通俗的讲就是 在不修改源代码的情况下，对其扩展，不影响原有功能。</p></li></ul><h3 id="_4-3-里式替换原则" tabindex="-1"><a class="header-anchor" href="#_4-3-里式替换原则"><span>4.3 里式替换原则</span></a></h3><ul><li><p>里式替换原则(Liskov Substitution Principle ，LSP): 所有引用基类的地方必须能透明地使用其子类的对象。</p></li><li><p>通俗的讲就是 子类可扩展父类, 而不是覆盖父类或改变父类原有的功能。</p></li></ul><h3 id="_4-4-依赖倒置原则" tabindex="-1"><a class="header-anchor" href="#_4-4-依赖倒置原则"><span>4.4 依赖倒置原则</span></a></h3><ul><li><p>依赖倒置原则(Dependency Inversion Principle ，DIP): 依赖于抽象。</p></li><li><p>通俗的讲:</p><ol><li>高层次模块不应该依赖于低层次模块，两者都应依赖于抽象</li><li>抽象不应该依赖细节，细节应该依赖于抽象。</li></ol></li></ul><h3 id="_4-5-接口隔离原则" tabindex="-1"><a class="header-anchor" href="#_4-5-接口隔离原则"><span>4.5 接口隔离原则</span></a></h3><ul><li><p>接口隔离原则(Interface Segregation Principle, ISP): 使用多个小且专门的接口, 不要使用一个大的总接口。</p></li><li><p>通俗的讲就是: 不要把所有功能都写在一个接口中，干啥的就是干啥的，且不应该依赖那些不需要用不着的接口。</p></li></ul><h3 id="_4-6-迪米特原则" tabindex="-1"><a class="header-anchor" href="#_4-6-迪米特原则"><span>4.6 迪米特原则</span></a></h3><ul><li><p>迪米特原则(Law of Demeter ，LoD): 降低类与类之间的耦合。</p></li><li><p>通俗的讲就是: 没有关系的类别硬往一起扯，减少没用的交际。</p></li></ul><h3 id="_4-7-合成-聚合复用原则" tabindex="-1"><a class="header-anchor" href="#_4-7-合成-聚合复用原则"><span>4.7 合成/聚合复用原则</span></a></h3><ul><li><p>合成/聚合复用原则(Composite/Aggregate Reuse Principle ，CARP): 尽量使用对象组合，而不是继承来达到复用的目的。</p></li><li><p>通俗的讲就是: PHP类之间的关系，尽可能的多使用 trait和 use ，少使用 extends。</p></li></ul>`,37))])}const v=e(d,[["render",r]]),y=JSON.parse('{"path":"/interview/php/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/","title":"面向对象篇","lang":"zh-CN","frontmatter":{"title":"面向对象篇","createTime":"2025/07/07 16:18:35","permalink":"/interview/php/面向对象篇/","description":"一、 面向对象基本知识 1.1 什么是类 类是事物相关属性特征和行为特征的集合。 属性特征: 就是该事物的状态。比如： 用户性别、用户的身高。 行为特征: 就是该事物能够做什么。比如： 用户下单、用户评论。 ⚠️ 注意 属性特征在类中被称为： 成员属性或成员变量 行为特征在类中被称为： 成员方法 1.2 什么是对象 对象是客户存在的一个实例，是事物的具...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"面向对象篇\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-07T08:48:09.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://docs.sreio.com/interview/php/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87/"}],["meta",{"property":"og:site_name","content":"Sreio Docs"}],["meta",{"property":"og:title","content":"面向对象篇"}],["meta",{"property":"og:description","content":"一、 面向对象基本知识 1.1 什么是类 类是事物相关属性特征和行为特征的集合。 属性特征: 就是该事物的状态。比如： 用户性别、用户的身高。 行为特征: 就是该事物能够做什么。比如： 用户下单、用户评论。 ⚠️ 注意 属性特征在类中被称为： 成员属性或成员变量 行为特征在类中被称为： 成员方法 1.2 什么是对象 对象是客户存在的一个实例，是事物的具..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-07T08:48:09.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-07T08:48:09.000Z"}]]},"readingTime":{"minutes":5.98,"words":1795},"git":{"createdTime":1751877858000,"updatedTime":1751878089000,"contributors":[{"name":"sreio","username":"sreio","email":"ingwei@163.com","commits":2,"avatar":"https://avatars.githubusercontent.com/sreio?v=4","url":"https://github.com/sreio"}],"changelog":[{"hash":"066c6248983ad7feba746c5bfc01203e48752ed3","time":1751878089000,"email":"ingwei@163.com","author":"sreio","message":"面试"},{"hash":"5be24b01f97e53b886885abde519c2e0cc6b3447","time":1751877858000,"email":"ingwei@163.com","author":"sreio","message":"面试"}]},"autoDesc":true,"filePathRelative":"interview/PHP/4.面向对象篇.md","headers":[]}');export{v as comp,y as data};
