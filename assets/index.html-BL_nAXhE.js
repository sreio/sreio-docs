import{_ as e,c as i,e as s,o as n}from"./app-DDsjqNbb.js";const l="/assets/grpc-BGBXVvCx.svg",a={};function r(d,t){return n(),i("div",null,t[0]||(t[0]=[s('<h2 id="什么是-rpc" tabindex="-1"><a class="header-anchor" href="#什么是-rpc"><span>什么是 RPC ？</span></a></h2><p>RPC 代指<code>远程过程调用</code>（Remote Procedure Call），它的调用包含了<code>传输协议</code>和<code>编码（对象序列号）协议</code>等等。允许运行于一台计算机的程序调用另一台计算机的子程序，而开发人员不需要了解底层通信细节的计算机软件通信协议。</p><h2 id="rpc-框架" tabindex="-1"><a class="header-anchor" href="#rpc-框架"><span>RPC 框架</span></a></h2><table><thead><tr><th style="text-align:center;">框架</th><th style="text-align:center;">跨语言</th><th style="text-align:center;">多 IDL</th><th style="text-align:center;">服务治理</th><th style="text-align:center;">注册中心</th><th style="text-align:center;">服务管理</th></tr></thead><tbody><tr><td style="text-align:center;"><a href="https://grpc.io/" target="_blank" rel="noopener noreferrer">grpc</a></td><td style="text-align:center;">√</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td></tr><tr><td style="text-align:center;"><a href="https://github.com/apache/thrift" target="_blank" rel="noopener noreferrer">thrift</a></td><td style="text-align:center;">√</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td></tr><tr><td style="text-align:center;"><a href="https://github.com/smallnest/rpcx" target="_blank" rel="noopener noreferrer">rpcx</a></td><td style="text-align:center;">×</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr><tr><td style="text-align:center;"><a href="https://github.com/apache/dubbo" target="_blank" rel="noopener noreferrer">dubbo</a></td><td style="text-align:center;">×</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr></tbody></table><h3 id="grpc" tabindex="-1"><a class="header-anchor" href="#grpc"><span>gRPC</span></a></h3><p>gRPC 是 Google 开源的一个高性能的 RPC(Remote Procedure Call) 框架，它具有如下的优点：</p><ul><li>提供高效的进程间通信。<code>gRPC</code> 没有使用 XML 或者 JSON 这种文本格式，而是采用了基于 <code>protocol buffers</code> 的二进制协议；同时，<code>gRPC</code> 采用了 <code>HTTP/2</code> 做为通信协议，从而能够快速的处理进程间通信。</li><li>简单且良好的服务接口和模式。<code>gRPC</code> 为程序开发提供了一种契约优先的方式，必须首先定义服务接口，才能处理实现细节。</li><li>支持多语言。<code>gRPC</code> 是语言中立的，我们可以选择任意一种编程语言，都能够与 <code>gRPC</code> 客户端或者服务端进行交互。</li><li>成熟并且已被广泛使用。通过在 Google 的大量实战测试，<code>gRPC</code> 已经发展成熟。</li></ul><figure><img src="'+l+`" alt="grpc" tabindex="0" loading="lazy" width="552" height="327"><figcaption>grpc</figcaption></figure><h3 id="讲解" tabindex="-1"><a class="header-anchor" href="#讲解"><span>讲解</span></a></h3><ol><li>客户端（gRPC Sub）调用 A 方法，发起 RPC 调用</li><li>对请求信息使用 Protobuf 进行对象序列化压缩（IDL）</li><li>服务端（gRPC Server）接收到请求后，解码请求体，进行业务逻辑处理并返回</li><li>对响应结果使用 Protobuf 进行对象序列化压缩（IDL）</li><li>客户端接受到服务端响应，解码请求体。回调被调用的 A 方法，唤醒正在等待响应（阻塞）的客户端调用并返回响应结果</li></ol><blockquote><p>IDL（Interface description language）是指接口描述语言，是用来描述软件组件接口的一种计算机语言，是跨平台开发的基础。IDL通过一种中立的方式来描述接口，使得在不同平台上运行的对象和用不同语言编写的程序可以相互通信交流；比如，一个组件用C++写成，另一个组件用Go写成。</p></blockquote><h2 id="protobuf" tabindex="-1"><a class="header-anchor" href="#protobuf"><span>Protobuf</span></a></h2><p><code>Protobuf</code>全称<code>Protocol Buffer</code>，是 Google 公司于2008年开源的一种<code>语言无关</code>、<code>平台无关</code>、<code>可扩展的</code>用于<code>序列化结构化</code>数据——类似于XML，但比XML更小、更快、更简单，它可用于（数据）通信协议、数据存储等。你只需要定义一次你想要的数据结构，然后你就可以使用特殊生成的源代码来轻松地从各种数据流和各种语言中写入和读取你的结构化数据。目前 <code>Protobuf</code> 被广泛用作微服务中的通信协议。</p><ul><li><a href="https://protobuf.dev/programming-guides/proto3/" target="_blank" rel="noopener noreferrer">protobuf v3语法官方文档</a></li><li><a href="https://liwenzhou.com/posts/Go/Protobuf3-language-guide-zh/" target="_blank" rel="noopener noreferrer">protobuf v3中文语法指南</a></li></ul><h3 id="标量值类型" tabindex="-1"><a class="header-anchor" href="#标量值类型"><span>标量值类型</span></a></h3><table><thead><tr><th style="text-align:center;">.proto Type</th><th style="text-align:center;">Notes</th><th style="text-align:center;">C++ Type</th><th style="text-align:center;">Java/Kotlin Type[1]</th><th style="text-align:center;">Python Type[3]</th><th style="text-align:center;">Go Type</th><th style="text-align:center;">PHP Type</th></tr></thead><tbody><tr><td style="text-align:center;">double</td><td style="text-align:center;"></td><td style="text-align:center;">double</td><td style="text-align:center;">double</td><td style="text-align:center;">float</td><td style="text-align:center;">float64</td><td style="text-align:center;">float</td></tr><tr><td style="text-align:center;">float</td><td style="text-align:center;"></td><td style="text-align:center;">float</td><td style="text-align:center;">float</td><td style="text-align:center;">float</td><td style="text-align:center;">float32</td><td style="text-align:center;">float</td></tr><tr><td style="text-align:center;">int32</td><td style="text-align:center;">使用可变长度编码。编码负数效率低下——如果你的字段可能有负值，则使用 sint32代替。</td><td style="text-align:center;">int32</td><td style="text-align:center;">int</td><td style="text-align:center;">int</td><td style="text-align:center;">int32</td><td style="text-align:center;">integer</td></tr><tr><td style="text-align:center;">int64</td><td style="text-align:center;">使用可变长度编码。编码负数效率低下——如果你的字段可能有负值，则使用 sint64代替。</td><td style="text-align:center;">int64</td><td style="text-align:center;">long</td><td style="text-align:center;">int/long[4]</td><td style="text-align:center;">int64</td><td style="text-align:center;">integer/string[6]</td></tr><tr><td style="text-align:center;">uint32</td><td style="text-align:center;">使用变长编码。</td><td style="text-align:center;">uint32</td><td style="text-align:center;">int[2]</td><td style="text-align:center;">int/long[4]</td><td style="text-align:center;">uint32</td><td style="text-align:center;">integer</td></tr><tr><td style="text-align:center;">uint64</td><td style="text-align:center;">使用变长编码。</td><td style="text-align:center;">uint64</td><td style="text-align:center;">long[2]</td><td style="text-align:center;">int/long[4]</td><td style="text-align:center;">uint64</td><td style="text-align:center;">integer/string[6]</td></tr><tr><td style="text-align:center;">sint32</td><td style="text-align:center;">使用可变长度编码。带符号的 int 值。这些编码比普通的 int32更有效地编码负数。</td><td style="text-align:center;">int32</td><td style="text-align:center;">int</td><td style="text-align:center;">int</td><td style="text-align:center;">int32</td><td style="text-align:center;">integer</td></tr><tr><td style="text-align:center;">sint64</td><td style="text-align:center;">使用可变长度编码。带符号的 int 值。这些编码比普通的 int64更有效地编码负数。</td><td style="text-align:center;">int64</td><td style="text-align:center;">long</td><td style="text-align:center;">int/long[4]</td><td style="text-align:center;">int64</td><td style="text-align:center;">integer/string[6]</td></tr><tr><td style="text-align:center;">fixed32</td><td style="text-align:center;">总是四个字节。如果值经常大于228，则比 uint32更有效率。</td><td style="text-align:center;">uint32</td><td style="text-align:center;">int[2]</td><td style="text-align:center;">int/long[4]</td><td style="text-align:center;">uint32</td><td style="text-align:center;">integer</td></tr><tr><td style="text-align:center;">fixed64</td><td style="text-align:center;">总是8字节。如果值经常大于256，则比 uint64更有效率。</td><td style="text-align:center;">uint64</td><td style="text-align:center;">integer/string[6]</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">sfixed32</td><td style="text-align:center;">总是四个字节。</td><td style="text-align:center;">int32</td><td style="text-align:center;">int</td><td style="text-align:center;">int</td><td style="text-align:center;">int32</td><td style="text-align:center;">integer</td></tr><tr><td style="text-align:center;">sfixed64</td><td style="text-align:center;">总是八个字节。</td><td style="text-align:center;">int64</td><td style="text-align:center;">integer/string[6]</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">bool</td><td style="text-align:center;"></td><td style="text-align:center;">bool</td><td style="text-align:center;">boolean</td><td style="text-align:center;">bool</td><td style="text-align:center;">bool</td><td style="text-align:center;">boolean</td></tr><tr><td style="text-align:center;">string</td><td style="text-align:center;">字符串必须始终包含 UTF-8编码的或7位 ASCII 文本，且不能长于232。</td><td style="text-align:center;">string</td><td style="text-align:center;">String</td><td style="text-align:center;">str/unicode[5]</td><td style="text-align:center;">string</td><td style="text-align:center;">string</td></tr><tr><td style="text-align:center;">bytes</td><td style="text-align:center;">可以包含任何不超过232字节的任意字节序列。</td><td style="text-align:center;">string</td><td style="text-align:center;">ByteString</td><td style="text-align:center;">str (Python 2)</td><td style="text-align:center;">bytes (Python 3)</td><td style="text-align:center;">[]byte</td></tr></tbody></table><p>在使用 Protocol Buffer Encoding 对消息进行序列化时，可以了解有关这些类型如何编码的更多信息。</p><ul><li>[1] Kotlin 使用来自 Java 的相应类型，甚至是无符号类型，以确保混合 Java/Kotlin 代码库的兼容性。</li><li>[2] 在 Java 中，无符号的32位和64位整数使用它们的有符号对应项来表示，最高位存储在有符号位中。</li><li>[3] 在任何情况下，为字段设置值都将执行类型检查，以确保其有效。</li><li>[4] 64位或无符号的32位整数在解码时总是表示为 long ，但如果在设置字段时给出 int，则可以表示为 int。在任何情况下，值必须与设置时表示的类型相匹配。见[2]。</li><li>[5] Python 字符串在解码时表示为 unicode，但如果给出了 ASCII 字符串，则可以表示为 str (这可能会更改)。</li><li>[6] 整数用于64位机器，字符串用于32位机器。</li></ul><h3 id="protobuf语法" tabindex="-1"><a class="header-anchor" href="#protobuf语法"><span>protobuf语法</span></a></h3><div class="language-protobuf line-numbers-mode" data-highlighter="shiki" data-ext="protobuf" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-protobuf"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">syntax</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> &quot;proto3&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 版本声明，使用Protocol Buffers v3版本</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">option</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> go_package</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> &quot;xx&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 指定生成的Go代码在你项目中的导入路径</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">package</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pb</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 包名</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 定义服务</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">service</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Greeter</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // SayHello 方法</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    rpc</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> SayHello</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">HelloRequest</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">returns</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">HelloResponse</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) {}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // ... 其他方法</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 请求消息</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> HelloRequest</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    string</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 响应消息</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> HelloResponse</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    string</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> reply</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在grpc中你可以定义四种类型的服务方法。" tabindex="-1"><a class="header-anchor" href="#在grpc中你可以定义四种类型的服务方法。"><span>在gRPC中你可以定义四种类型的服务方法。</span></a></h3><ul><li><p><code>普通 rpc</code>，客户端向服务器发送一个请求，然后得到一个响应，就像普通的函数调用一样。</p><div class="language-protobuf line-numbers-mode" data-highlighter="shiki" data-ext="protobuf" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-protobuf"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">rpc SayHello(HelloRequest) returns (HelloResponse);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><code>服务器流式 rpc</code>，其中客户端向服务器发送请求，并获得一个流来读取一系列消息。客户端从返回的流中读取，直到没有更多的消息。gRPC 保证在单个 RPC 调用中的消息是有序的。</p><div class="language-protobuf line-numbers-mode" data-highlighter="shiki" data-ext="protobuf" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-protobuf"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">rpc LotsOfReplies(HelloRequest) returns (stream HelloResponse);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><code>客户端流式 rpc</code>，其中客户端写入一系列消息并将其发送到服务器，同样使用提供的流。一旦客户端完成了消息的写入，它就等待服务器读取消息并返回响应。同样，gRPC 保证在单个 RPC 调用中对消息进行排序。</p><div class="language-protobuf line-numbers-mode" data-highlighter="shiki" data-ext="protobuf" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-protobuf"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">rpc LotsOfGreetings(stream HelloRequest) returns (HelloResponse);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><code>双向流式 rpc</code>，其中双方使用读写流发送一系列消息。这两个流独立运行，因此客户端和服务器可以按照自己喜欢的顺序读写: 例如，服务器可以等待接收所有客户端消息后再写响应，或者可以交替读取消息然后写入消息，或者其他读写组合。每个流中的消息是有序的。</p><div class="language-protobuf line-numbers-mode" data-highlighter="shiki" data-ext="protobuf" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-protobuf"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">rpc LotsOfGreetings(stream HelloRequest) returns (stream HelloResponse);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2><h3 id="安装protocol-buffers-v3" tabindex="-1"><a class="header-anchor" href="#安装protocol-buffers-v3"><span>安装Protocol Buffers v3</span></a></h3><p>安装用于生成gRPC服务代码的协议编译器，最简单的方法是从下面的链接：https://github.com/google/protobuf/releases 下载适合你平台的预编译好的二进制文件（<code>protoc-&lt;version&gt;-&lt;platform&gt;.zip</code>）。</p><p>其中解压之后的文件：</p><ul><li>bin 目录下的 protoc 是可执行文件。</li><li>include 目录下的是 google 定义的.proto文件，我们<code>import &quot;google/protobuf/timestamp.proto&quot;</code>就是从此处导入。</li></ul><div class="hint-container tip"><p class="hint-container-title">我们需要将下载得到的可执行文件protoc所在的 bin 目录加到我们电脑的<code>环境变量</code>中。</p></div><h3 id="安装插件" tabindex="-1"><a class="header-anchor" href="#安装插件"><span>安装插件</span></a></h3><p>因为本文我们是使用Go语言做开发，接下来执行下面的命令安装protoc的Go插件：</p><h4 id="安装go语言插件" tabindex="-1"><a class="header-anchor" href="#安装go语言插件"><span>安装go语言插件：</span></a></h4><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">go</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> google.golang.org/protobuf/cmd/protoc-gen-go</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该插件会根据.proto文件生成一个后缀为.pb.go的文件，包含所有.proto文件中定义的类型及其序列化方法。</p><h4 id="安装grpc插件" tabindex="-1"><a class="header-anchor" href="#安装grpc插件"><span>安装grpc插件：</span></a></h4><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">go</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> google.golang.org/grpc/cmd/protoc-gen-go-grpc</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该插件会生成一个后缀为_grpc.pb.go的文件，其中包含：</p><ul><li>一种接口类型(或存根) ，供客户端调用的服务方法。</li><li>服务器要实现的接口类型。</li></ul><blockquote><p>上述命令会默认将插件安装到<code>$GOPATH/bin</code>，为了protoc编译器能找到这些插件，请确保你的<code>$GOPATH/bin</code>在环境变量中。</p></blockquote><h2 id="验证安装" tabindex="-1"><a class="header-anchor" href="#验证安装"><span>验证安装</span></a></h2><p>依次执行以下命令检查一下是否开发环境都准备完毕。</p><ul><li>确认 protoc 安装完成。</li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">❯</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> protoc</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --version</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">libprotoc</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3.20.1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>确认 protoc-gen-go 安装完成。</li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">❯</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> protoc-gen-go</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --version</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">protoc-gen-go</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> v1.28.0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果这里提示protoc-gen-go不是可执行的程序，请确保你的 GOPATH 下的 bin 目录在你电脑的环境变量中。</p></blockquote><ul><li>确认 protoc-gen-go-grpc 安装完成。</li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">❯</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> protoc-gen-go-grpc</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --version</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">protoc-gen-go-grpc</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1.2.0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果这里提示protoc-gen-go-grpc不是可执行的程序，请确保你的 GOPATH 下的 bin 目录在你电脑的环境变量中。</p></blockquote>`,48)]))}const c=e(a,[["render",r]]),o=JSON.parse('{"path":"/golang/h22dt60j/","title":"gRPC及相关介绍","lang":"zh-CN","frontmatter":{"title":"gRPC及相关介绍","createTime":"2025/07/08 10:23:59","permalink":"/golang/h22dt60j/","description":"什么是 RPC ？ RPC 代指远程过程调用（Remote Procedure Call），它的调用包含了传输协议和编码（对象序列号）协议等等。允许运行于一台计算机的程序调用另一台计算机的子程序，而开发人员不需要了解底层通信细节的计算机软件通信协议。 RPC 框架 gRPC gRPC 是 Google 开源的一个高性能的 RPC(Remote Proc...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"gRPC及相关介绍\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-14T03:14:18.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://docs.sreio.com/golang/h22dt60j/"}],["meta",{"property":"og:site_name","content":"Sreio Docs"}],["meta",{"property":"og:title","content":"gRPC及相关介绍"}],["meta",{"property":"og:description","content":"什么是 RPC ？ RPC 代指远程过程调用（Remote Procedure Call），它的调用包含了传输协议和编码（对象序列号）协议等等。允许运行于一台计算机的程序调用另一台计算机的子程序，而开发人员不需要了解底层通信细节的计算机软件通信协议。 RPC 框架 gRPC gRPC 是 Google 开源的一个高性能的 RPC(Remote Proc..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-14T03:14:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-14T03:14:18.000Z"}]]},"readingTime":{"minutes":7.67,"words":2301},"git":{"createdTime":1751941688000,"updatedTime":1752462858000,"contributors":[{"name":"sreio","username":"sreio","email":"ingwei@163.com","commits":2,"avatar":"https://avatars.githubusercontent.com/sreio?v=4","url":"https://github.com/sreio"}],"changelog":[{"hash":"392e0717075550911bee8967562578d34bf94c89","time":1752462858000,"email":"ingwei@163.com","author":"sreio","message":"updated: fixed tip"},{"hash":"d57fb21cb27927b0c89eb7f1047937b7a671c0a1","time":1751941688000,"email":"ingwei@163.com","author":"sreio","message":"go"}]},"autoDesc":true,"filePathRelative":"golang/9.gRPC/1.README.md","headers":[]}');export{c as comp,o as data};
