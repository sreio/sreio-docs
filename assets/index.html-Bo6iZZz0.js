import{_ as t,c as o,e as i,o as a}from"./app-DDsjqNbb.js";const c="/assets/1-1-DAT3DSgF.png",n="/assets/1-2-CDwJc0nY.png",r={};function s(d,e){return a(),o("div",null,e[0]||(e[0]=[i('<h2 id="进程和线程" tabindex="-1"><a class="header-anchor" href="#进程和线程"><span>进程和线程</span></a></h2><ul><li>A. <code>进程</code>是程序在操作系统中的一次执行过程，系统进行资源分配和调度的一个<code>独立单位</code>。</li><li>B. <code>线程</code>是进程的一个执行实体,是CPU调度和分派的<code>基本单位</code>,它是比进程更小的能独立运行的基本单位。</li><li>C.一个进程可以创建和撤销多个线程;同一个进程中的多个线程之间可以并发执行。</li></ul><h3 id="并发和并行" tabindex="-1"><a class="header-anchor" href="#并发和并行"><span>并发和并行</span></a></h3><ul><li>A. 多线程程序在一个核的cpu上运行，就是<code>并发</code>。</li><li>B. 多线程程序在多个核的cpu上运行，就是<code>并行</code>。</li></ul><p>并发</p><figure><img src="'+c+'" alt="img" tabindex="0" loading="lazy" width="335" height="186"><figcaption>img</figcaption></figure><p>并行</p><figure><img src="'+n+'" alt="img" tabindex="0" loading="lazy" width="367" height="186"><figcaption>img</figcaption></figure><h2 id="线程和协程" tabindex="-1"><a class="header-anchor" href="#线程和协程"><span>线程和协程</span></a></h2><ul><li><code>线程</code>：一个线程上可以跑多个协程，协程是轻量级的线程。</li><li><code>协程</code>：<strong>独立的栈空间，共享堆空间</strong>，调度由用户自己控制，本质上有点类似于用户级线程，这些用户级线程的调度也是自己实现的。</li></ul><div class="hint-container tip"><p class="hint-container-title">goroutine 只是由官方实现的超级”线程池”。</p></div><p>每个实力4~5KB的栈内存占用和由于实现机制而大幅减少的创建和销毁开销是go高并发的根本原因。</p><h3 id="并发不是并行" tabindex="-1"><a class="header-anchor" href="#并发不是并行"><span>并发不是并行：</span></a></h3><p><code>并发</code>主要由切换<code>时间片</code>来实现”同时”运行，并行则是直接利用多核实现多线程的运行，go可以设置使用核数，以发挥多核计算机的能力。</p><p><code>goroutine</code> 奉行<code>通过通信来共享内存</code>，而不是共享内存来通信。</p>',15)]))}const l=t(r,[["render",s]]),g=JSON.parse('{"path":"/golang/golang_study/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/","title":"并发编程","lang":"zh-CN","frontmatter":{"title":"并发编程","createTime":"2025/07/08 09:40:52","permalink":"/golang/golang_study/并发编程/","description":"进程和线程 A. 进程是程序在操作系统中的一次执行过程，系统进行资源分配和调度的一个独立单位。 B. 线程是进程的一个执行实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位。 C.一个进程可以创建和撤销多个线程;同一个进程中的多个线程之间可以并发执行。 并发和并行 A. 多线程程序在一个核的cpu上运行，就是并发。 B. 多线程程...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"并发编程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-14T03:14:18.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://docs.sreio.com/golang/golang_study/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"}],["meta",{"property":"og:site_name","content":"Sreio Docs"}],["meta",{"property":"og:title","content":"并发编程"}],["meta",{"property":"og:description","content":"进程和线程 A. 进程是程序在操作系统中的一次执行过程，系统进行资源分配和调度的一个独立单位。 B. 线程是进程的一个执行实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位。 C.一个进程可以创建和撤销多个线程;同一个进程中的多个线程之间可以并发执行。 并发和并行 A. 多线程程序在一个核的cpu上运行，就是并发。 B. 多线程程..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-14T03:14:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-14T03:14:18.000Z"}]]},"readingTime":{"minutes":1.37,"words":410},"git":{"createdTime":1751941688000,"updatedTime":1752462858000,"contributors":[{"name":"sreio","username":"sreio","email":"ingwei@163.com","commits":2,"avatar":"https://avatars.githubusercontent.com/sreio?v=4","url":"https://github.com/sreio"}],"changelog":[{"hash":"392e0717075550911bee8967562578d34bf94c89","time":1752462858000,"email":"ingwei@163.com","author":"sreio","message":"updated: fixed tip"},{"hash":"d57fb21cb27927b0c89eb7f1047937b7a671c0a1","time":1751941688000,"email":"ingwei@163.com","author":"sreio","message":"go"}]},"autoDesc":true,"filePathRelative":"golang/1.入门教程/5.并发编程/1.README.md","headers":[]}');export{l as comp,g as data};
