import{_ as i}from"./test_11-e1RybdPH.js";import{_ as a,c as n,e,o as l}from"./app-DDsjqNbb.js";const p={};function t(d,s){return l(),n("div",null,s[0]||(s[0]=[e(`<p>分析代码前，有必要主动告知大家本文分析的Laravel框架是哪个版本。以防有读者在核对代码时，发现作者引用的代码和其本地的代码版本不一致，由此引发不必要的误会。</p><p>对于框架版本不一致的情况，强烈建议您在本地安装一个和作者分析的版本一致的Laravel应用。作者相信通读这个系列的文章后，对于新版本框架的代码，您可以依葫芦画瓢，依靠自己的力量去理解新旧框架之间的不同部分。</p><p>下面是本文安装的Laravel框架版本和php版本：</p><h2 id="laravel" tabindex="-1"><a class="header-anchor" href="#laravel"><span>Laravel</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>$ php artisan</span></span>
<span class="line"><span>Laravel Framework 5.8.38</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Usage:</span></span>
<span class="line"><span>  command [options] [arguments]</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>... ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果读者本地的Laravel版本不是5.8.38，建议以git方式下载本书，同时切换到相应的分支(除main分支外，其他分支名称均包含Laravel版本号)，目前主分支main对应的Laravel版本号为：5.8.38。</p></blockquote><h2 id="php" tabindex="-1"><a class="header-anchor" href="#php"><span>PHP</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>vagrant@homestead:~$ php7.2 --version</span></span>
<span class="line"><span>PHP 7.2.34-24+ubuntu20.04.1+deb.sury.org+1 (cli) (built: Aug 26 2021 15:55:49) ( NTS )</span></span>
<span class="line"><span>Copyright (c) 1997-2018 The PHP Group</span></span>
<span class="line"><span>Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies</span></span>
<span class="line"><span>    with Zend OPcache v7.2.34-24+ubuntu20.04.1+deb.sury.org+1, Copyright (c) 1999-2018, by Zend Technologies</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>笔者本机上采用的运行环境为Homestead, Homestead依赖Virtualbox虚拟机需要前置安装Vagrant、Virtualbox等软件。</p></blockquote><h2 id="composer安装" tabindex="-1"><a class="header-anchor" href="#composer安装"><span>composer安装</span></a></h2><p>composer安装方法：<code>composer create-project --prefer-dist laravel/laravel blog &quot;5.8.*&quot;</code></p><blockquote><p>上述命令中的blog，实际上是我们安装完laravel框架后项目的文件夹名称</p></blockquote><h2 id="env配置" tabindex="-1"><a class="header-anchor" href="#env配置"><span>.env配置</span></a></h2><p>通常，当我们使用composer执行完上述命令后，blog应用并不是立即可用的，你还需要做一些必要的配置：</p><p>源文件路径：blog/.env</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>APP_NAME=Blog</span></span>
<span class="line"><span>APP_ENV=local</span></span>
<span class="line"><span>APP_KEY=base64:fvgDEFOa3vK7Hk8lvUwN8Pat0w/u7o16IJ4j+lj3g1k=</span></span>
<span class="line"><span>APP_DEBUG=true</span></span>
<span class="line"><span>APP_URL=http://dev.blog.z</span></span>
<span class="line"><span></span></span>
<span class="line"><span>LOG_CHANNEL=stack</span></span>
<span class="line"><span></span></span>
<span class="line"><span>DB_CONNECTION=mysql</span></span>
<span class="line"><span>DB_HOST=192.168.10.1</span></span>
<span class="line"><span>DB_PORT=3306</span></span>
<span class="line"><span>DB_DATABASE=laravel</span></span>
<span class="line"><span>DB_USERNAME=root</span></span>
<span class="line"><span>DB_PASSWORD=123456</span></span>
<span class="line"><span></span></span>
<span class="line"><span>BROADCAST_DRIVER=log</span></span>
<span class="line"><span>CACHE_DRIVER=file</span></span>
<span class="line"><span>QUEUE_CONNECTION=database</span></span>
<span class="line"><span>QUEUE_DRIVER=database</span></span>
<span class="line"><span>SESSION_DRIVER=file</span></span>
<span class="line"><span>#SESSION_DRIVER=database</span></span>
<span class="line"><span>#SESSION_DRIVER=redis//使用redis</span></span>
<span class="line"><span>#SESSION_CONNECTION=session//使用redis</span></span>
<span class="line"><span>SESSION_LIFETIME=120</span></span>
<span class="line"><span></span></span>
<span class="line"><span>REDIS_HOST=127.0.0.1</span></span>
<span class="line"><span>REDIS_PASSWORD=null</span></span>
<span class="line"><span>REDIS_PORT=6379</span></span>
<span class="line"><span>REDIS_DB=0</span></span>
<span class="line"><span></span></span>
<span class="line"><span>MAIL_DRIVER=smtp</span></span>
<span class="line"><span>MAIL_HOST=smtp.mailtrap.io</span></span>
<span class="line"><span>MAIL_PORT=2525</span></span>
<span class="line"><span>MAIL_USERNAME=null</span></span>
<span class="line"><span>MAIL_PASSWORD=null</span></span>
<span class="line"><span>MAIL_ENCRYPTION=null</span></span>
<span class="line"><span></span></span>
<span class="line"><span>AWS_ACCESS_KEY_ID=</span></span>
<span class="line"><span>AWS_SECRET_ACCESS_KEY=</span></span>
<span class="line"><span>AWS_DEFAULT_REGION=us-east-1</span></span>
<span class="line"><span>AWS_BUCKET=</span></span>
<span class="line"><span></span></span>
<span class="line"><span>PUSHER_APP_ID=</span></span>
<span class="line"><span>PUSHER_APP_KEY=</span></span>
<span class="line"><span>PUSHER_APP_SECRET=</span></span>
<span class="line"><span>PUSHER_APP_CLUSTER=mt1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>MIX_PUSHER_APP_KEY=&quot;\${PUSHER_APP_KEY}&quot;</span></span>
<span class="line"><span>MIX_PUSHER_APP_CLUSTER=&quot;\${PUSHER_APP_CLUSTER}&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：默认composer安装laravel框架完成后，根目录下只有一个&quot;.env.example&quot;文件，你需要自己生成一个.env文件，并且修改其中的配置值。上面这个示例，是作者本机应用的一个配置。关于Laravel如何配置，您可以阅读Laravel5.8手册获取相关知识，此处不再赘述。</p><p>由于我们分析的代码不涉及读取数据库的任何操作，上述配置仍可继续简化（将&quot;DB_&quot;为前缀的配置项全部删除或注释）</p></blockquote><h2 id="nginx站点配置" tabindex="-1"><a class="header-anchor" href="#nginx站点配置"><span>nginx站点配置</span></a></h2><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-nginx"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">server</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        listen </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">   80</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        server_name </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> dev.blog.z</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        root </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;/home/www/blog/public/&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        index </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> index.htm index.html index.php</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        location</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> / </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">{</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">             try_files </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">$</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">uri</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> $</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">uri</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/ /index.php?</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">$</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">query_string</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        location</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ~</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;"> \\.php(.*)$ </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">{</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            fastcgi_pass </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  127.0.0.1:9000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            fastcgi_index </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> index.php</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            fastcgi_param </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> SCRIPT_FILENAME  </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">$</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">document_root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">$</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fastcgi_script_name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            include </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fastcgi_params</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        }               </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：在这个配置实例中，我们给web网站定义的域名是&quot;dev.blog.z&quot;（和之前.env文件中的APP_URL保持一致），这个域名您当然可以随意更改。同时您需要注意的是root对应的配置值：/home/www/blog/public/，这个路径一定要对应您本地安装blog应用后文件夹所处的实际目录。</p></blockquote><p>默认情况下完成上述配置后，访问的主页应该像下面这样：</p><figure><img src="`+i+`" alt="" tabindex="0" loading="lazy" width="1037" height="688"><figcaption></figcaption></figure><p>【图1.2】</p><h2 id="关于nginx重定向" tabindex="-1"><a class="header-anchor" href="#关于nginx重定向"><span>关于Nginx重定向</span></a></h2><p>通常，基于MVC模式的框架都是走统一的单一入口文件模式，而在web服务器中, 要实现这一点也很简单，利用web服务器的URL重定向功能，比如nginx提供的try files指令就能实现。我们来看一个Laravel站点的配置文件(nginx.conf)：</p><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-nginx"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">server</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        listen </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">   80</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        server_name </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> dev.blog.z</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        root </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;/home/www/www/blog/public/&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        index </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> index.htm index.html index.php</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        location</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> / </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">{</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">             try_files </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">$</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">uri</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> $</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">uri</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/ /index.php?</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">$</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">query_string</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        location</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ~</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;"> \\.php(.*)$ </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">{</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            fastcgi_pass </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  127.0.0.1:9000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            fastcgi_index </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> index.php</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            fastcgi_param </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> SCRIPT_FILENAME  </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">$</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">document_root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">$</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fastcgi_script_name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            include </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> fastcgi_params</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        }               </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在假设用户在浏览器中输入:http://dev.blog.z/test/index 根据上面这个配置, nginx会进行怎样的处理呢？</p><ul><li>首先nginx读取路径中的uri部分：/test/index，try files指令的意思是优先读取相对应目录下的文件，读取不到则丢弃该请求，并重新发起一个子请求。</li><li>由于/home/www/www/blog/public/下没有test/index文件夹，因此服务器会发起一个内部子请求到/home/www/www/blog/public/index.php</li><li>由于try files指令中index.php后面携带了<code>?$query_string</code>，因此请求发送到index.php后，在服务端PHP通过<code>$_SERVER[&#39;REQUEST_URI&#39;]</code>语句获取到的值为/test/index</li></ul><p>由此, 我们可以猜想Laravel框架在路由解析这一块使用的是分析<code>$_SERVER[&#39;REQUEST_URI&#39;]</code>结果, 和ThinkPHP3中分析path_info或者Phalcon中直接将uri放在_url=后作为重定向地址不同。</p><h2 id="思考" tabindex="-1"><a class="header-anchor" href="#思考"><span>思考</span></a></h2><ol><li>如果public下面有test/index/index.htm文件存在, 浏览器直接访问http://dev.blog.z/test/index 会发生什么？</li><li>关于本文末尾提到的路由解析猜想，如何验证？</li></ol>`,31)]))}const c=a(p,[["render",t]]),k=JSON.parse('{"path":"/php/pmk7j8vr/","title":"第一章：基础环境搭建","lang":"zh-CN","frontmatter":{"title":"第一章：基础环境搭建","createTime":"2025/07/08 10:34:23","permalink":"/php/pmk7j8vr/","description":"分析代码前，有必要主动告知大家本文分析的Laravel框架是哪个版本。以防有读者在核对代码时，发现作者引用的代码和其本地的代码版本不一致，由此引发不必要的误会。 对于框架版本不一致的情况，强烈建议您在本地安装一个和作者分析的版本一致的Laravel应用。作者相信通读这个系列的文章后，对于新版本框架的代码，您可以依葫芦画瓢，依靠自己的力量去理解新旧框架之...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第一章：基础环境搭建\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-09T01:20:36.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://docs.sreio.com/php/pmk7j8vr/"}],["meta",{"property":"og:site_name","content":"Sreio Docs"}],["meta",{"property":"og:title","content":"第一章：基础环境搭建"}],["meta",{"property":"og:description","content":"分析代码前，有必要主动告知大家本文分析的Laravel框架是哪个版本。以防有读者在核对代码时，发现作者引用的代码和其本地的代码版本不一致，由此引发不必要的误会。 对于框架版本不一致的情况，强烈建议您在本地安装一个和作者分析的版本一致的Laravel应用。作者相信通读这个系列的文章后，对于新版本框架的代码，您可以依葫芦画瓢，依靠自己的力量去理解新旧框架之..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-09T01:20:36.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-09T01:20:36.000Z"}]]},"readingTime":{"minutes":4.07,"words":1222},"git":{"createdTime":1751942180000,"updatedTime":1752024036000,"contributors":[{"name":"sreio","username":"sreio","email":"ingwei@163.com","commits":4,"avatar":"https://avatars.githubusercontent.com/sreio?v=4","url":"https://github.com/sreio"}],"changelog":[{"hash":"0b7d61f08c563d6514d6336c56fa0848a69e46eb","time":1752024036000,"email":"ingwei@163.com","author":"sreio","message":"README"},{"hash":"a16a3f8c5e99bfa6f2a99f497d8114454ed414e3","time":1751962383000,"email":"ingwei@163.com","author":"sreio","message":"rename"},{"hash":"776f4fb3444a05427673bc65ccda7cd39ea0073c","time":1751962019000,"email":"ingwei@163.com","author":"sreio","message":"update"},{"hash":"7d36c2822e978ef31a2cebd3a69e67c3b9a172e9","time":1751942180000,"email":"ingwei@163.com","author":"sreio","message":"php"}]},"autoDesc":true,"filePathRelative":"php/4.穿透Laravel/1.第一章：基础环境搭建/README.md","headers":[]}');export{c as comp,k as data};
