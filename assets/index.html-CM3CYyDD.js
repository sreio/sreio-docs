import{_ as i,c as a,e,o as n}from"./app-DDsjqNbb.js";const l={};function h(k,s){return n(),a("div",null,s[0]||(s[0]=[e(`<h2 id="之前的做法" tabindex="-1"><a class="header-anchor" href="#之前的做法"><span>之前的做法</span></a></h2><p>在 Docker 17.05 版本之前，我们构建 Docker 镜像时，通常会采用两种方式：</p><h3 id="全部放入一个-dockerfile" tabindex="-1"><a class="header-anchor" href="#全部放入一个-dockerfile"><span>全部放入一个 Dockerfile</span></a></h3><p>一种方式是将所有的构建过程编包含在一个 <code>Dockerfile</code> 中，包括项目及其依赖库的编译、测试、打包等流程，这里可能会带来的一些问题：</p><ul><li><p>镜像层次多，镜像体积较大，部署时间变长</p></li><li><p>源代码存在泄露的风险</p></li></ul><p>例如，编写 <code>app.go</code> 文件，该程序输出 <code>Hello World!</code></p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-go"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">package</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">fmt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">func</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    fmt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Hello World!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写 <code>Dockerfile.one</code> 文件</p><div class="language-docker line-numbers-mode" data-highlighter="shiki" data-ext="docker" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-docker"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> golang:alpine</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">RUN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> apk --no-cache add git ca-certificates</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WORKDIR</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> /go/src/github.com/go/helloworld/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">COPY</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> app.go .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">RUN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> go get -d -v github.com/go-sql-driver/mysql \\</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  &amp;&amp; CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app . \\</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  &amp;&amp; cp /go/src/github.com/go/helloworld/app /root</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WORKDIR</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> /root/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">CMD</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;./app&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建镜像</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> build</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -t</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> go/helloworld:1</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -f</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Dockerfile.one</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="分散到多个-dockerfile" tabindex="-1"><a class="header-anchor" href="#分散到多个-dockerfile"><span>分散到多个 Dockerfile</span></a></h3><p>另一种方式，就是我们事先在一个 <code>Dockerfile</code> 将项目及其依赖库编译测试打包好后，再将其拷贝到运行环境中，这种方式需要我们编写两个 <code>Dockerfile</code> 和一些编译脚本才能将其两个阶段自动整合起来，这种方式虽然可以很好地规避第一种方式存在的风险，但明显部署过程较复杂。</p><p>例如，编写 <code>Dockerfile.build</code> 文件</p><div class="language-docker line-numbers-mode" data-highlighter="shiki" data-ext="docker" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-docker"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> golang:alpine</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">RUN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> apk --no-cache add git</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WORKDIR</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> /go/src/github.com/go/helloworld</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">COPY</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> app.go .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">RUN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> go get -d -v github.com/go-sql-driver/mysql \\</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  &amp;&amp; CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写 <code>Dockerfile.copy</code> 文件</p><div class="language-docker line-numbers-mode" data-highlighter="shiki" data-ext="docker" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-docker"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> alpine:latest</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">RUN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> apk --no-cache add ca-certificates</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WORKDIR</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> /root/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">COPY</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> app .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">CMD</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;./app&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新建 <code>build.sh</code></p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#!/bin/sh</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Building</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> go/helloworld:build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> build</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -t</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> go/helloworld:build</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -f</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Dockerfile.build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> create</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> extract</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> go/helloworld:build</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cp</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> extract:/go/src/github.com/go/helloworld/app</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./app</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rm</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -f</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> extract</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Building</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> go/helloworld:2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> build</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --no-cache</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -t</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> go/helloworld:2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -f</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Dockerfile.copy</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">rm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./app</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在运行脚本即可构建镜像</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> chmod</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> +x</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> build.sh</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./build.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对比两种方式生成的镜像大小</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> image</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ls</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">REPOSITORY</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">      TAG</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    IMAGE</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ID</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">        CREATED</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">         SIZE</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">go/helloworld</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">   2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">      f7cf3465432c</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">    22</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> seconds</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ago</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  6.47MB</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">go/helloworld</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">   1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">      f55d3e16affc</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">    2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> minutes</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ago</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   295MB</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用多阶段构建" tabindex="-1"><a class="header-anchor" href="#使用多阶段构建"><span>使用多阶段构建</span></a></h2><p>为解决以上问题，Docker v17.05 开始支持多阶段构建 (<code>multistage builds</code>)。使用多阶段构建我们就可以很容易解决前面提到的问题，并且只需要编写一个 <code>Dockerfile</code>：</p><p>例如，编写 <code>Dockerfile</code> 文件</p><div class="language-docker line-numbers-mode" data-highlighter="shiki" data-ext="docker" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-docker"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> golang:alpine </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">as</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> builder</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">RUN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> apk --no-cache add git</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WORKDIR</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> /go/src/github.com/go/helloworld/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">RUN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> go get -d -v github.com/go-sql-driver/mysql</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">COPY</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> app.go .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">RUN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> alpine:latest </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">as</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> prod</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">RUN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> apk --no-cache add ca-certificates</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WORKDIR</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> /root/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">COPY</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> --from=0 /go/src/github.com/go/helloworld/app .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">CMD</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;./app&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建镜像</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> build</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -t</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> go/helloworld:3</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>对比三个镜像大小</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> image</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ls</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">REPOSITORY</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">        TAG</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   IMAGE</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ID</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">         CREATED</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">            SIZE</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">go/helloworld</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">     3</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">     d6911ed9c846</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">     7</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> seconds</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ago</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">      6.47MB</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">go/helloworld</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">     2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">     f7cf3465432c</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">     22</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> seconds</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ago</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">     6.47MB</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">go/helloworld</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">     1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">     f55d3e16affc</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">     2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> minutes</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ago</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">      295MB</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很明显使用多阶段构建的镜像体积小，同时也完美解决了上边提到的问题。</p><h3 id="只构建某一阶段的镜像" tabindex="-1"><a class="header-anchor" href="#只构建某一阶段的镜像"><span>只构建某一阶段的镜像</span></a></h3><p>我们可以使用 <code>as</code> 来为某一阶段命名，例如</p><div class="language-docker line-numbers-mode" data-highlighter="shiki" data-ext="docker" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-docker"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> golang:alpine </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">as</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> builder</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>例如当我们只想构建 <code>builder</code> 阶段的镜像时，增加 <code>--target=builder</code> 参数即可</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> build</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --target</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> builder</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -t</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> username/imagename:tag</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="构建时从其他镜像复制文件" tabindex="-1"><a class="header-anchor" href="#构建时从其他镜像复制文件"><span>构建时从其他镜像复制文件</span></a></h3><p>上面例子中我们使用 <code>COPY --from=0 /go/src/github.com/go/helloworld/app .</code> 从上一阶段的镜像中复制文件，我们也可以复制任意镜像中的文件。</p><div class="language-docker line-numbers-mode" data-highlighter="shiki" data-ext="docker" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-docker"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">$ COPY --from=nginx:latest /etc/nginx/nginx.conf /nginx.conf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,40)]))}const t=i(l,[["render",h]]),p=JSON.parse('{"path":"/linux/%E5%A4%9A%E9%98%B6%E6%AE%B5%E6%9E%84%E5%BB%BA/","title":"多阶段构建","lang":"zh-CN","frontmatter":{"title":"多阶段构建","createTime":"2025/07/07 15:59:33","permalink":"/linux/多阶段构建/","description":"之前的做法 在 Docker 17.05 版本之前，我们构建 Docker 镜像时，通常会采用两种方式： 全部放入一个 Dockerfile 一种方式是将所有的构建过程编包含在一个 Dockerfile 中，包括项目及其依赖库的编译、测试、打包等流程，这里可能会带来的一些问题： 镜像层次多，镜像体积较大，部署时间变长 源代码存在泄露的风险 例如，编写 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"多阶段构建\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-07T08:09:54.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://docs.sreio.com/linux/%E5%A4%9A%E9%98%B6%E6%AE%B5%E6%9E%84%E5%BB%BA/"}],["meta",{"property":"og:site_name","content":"Sreio Docs"}],["meta",{"property":"og:title","content":"多阶段构建"}],["meta",{"property":"og:description","content":"之前的做法 在 Docker 17.05 版本之前，我们构建 Docker 镜像时，通常会采用两种方式： 全部放入一个 Dockerfile 一种方式是将所有的构建过程编包含在一个 Dockerfile 中，包括项目及其依赖库的编译、测试、打包等流程，这里可能会带来的一些问题： 镜像层次多，镜像体积较大，部署时间变长 源代码存在泄露的风险 例如，编写 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-07T08:09:54.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-07T08:09:54.000Z"}]]},"readingTime":{"minutes":2.81,"words":842},"git":{"createdTime":1751875794000,"updatedTime":1751875794000,"contributors":[{"name":"sreio","username":"sreio","email":"ingwei@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/sreio?v=4","url":"https://github.com/sreio"}],"changelog":[{"hash":"309568ac808a0e32f2a30faf8785a5bb75211f52","time":1751875794000,"email":"ingwei@163.com","author":"sreio","message":"docker"}]},"autoDesc":true,"filePathRelative":"linux/7.Docker-从入门到实践/6.多阶段构建/readme.md","headers":[]}');export{t as comp,p as data};
