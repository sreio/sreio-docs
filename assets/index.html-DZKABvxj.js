import{_ as s,c as e,e as a,o as t}from"./app-DDsjqNbb.js";const n={};function l(h,i){return t(),e("div",null,i[0]||(i[0]=[a(`<h2 id="php基本变量类型" tabindex="-1"><a class="header-anchor" href="#php基本变量类型"><span>php基本变量类型</span></a></h2><ul><li><code>四种标量类型</code> ：boolean （布尔型）、integer （整型）、float （浮点型, 也称作 double)、string （字符串）</li><li><code>四种复合类型</code> ：array （数组）、object （对象）、callable、iterable</li><li><code>最后是两种特殊类型</code> ：resource（资源）、NULL（NULL）</li></ul><h2 id="php魔术方法" tabindex="-1"><a class="header-anchor" href="#php魔术方法"><span>PHP魔术方法</span></a></h2><p>13个常用的魔术方法: <code>__construct</code>、 <code>__destruct</code>、 <code>__call</code> 或 <code>__classStatic</code>、 <code>__get</code>、 <code>__set</code>、 <code>__isset</code>、 <code>__unset</code>、 <code>__toString</code>、 <code>__clone</code>、 <code>__sutoload</code>、 <code>__invoke</code>、 <code>__sleep</code>、 <code>__wakeup</code></p><ol><li><code>__construct 构造方法</code>: 当一个类被实例化创建对象时，会首先执行构造方法。</li><li><code>__destruct 析构方法</code>: 当对象在销毁之前或失去对对象的引用时，会调用 析构方法。</li><li><code>__call 或 __callStatic</code> :当调用一个未定义的或没有权限的成员方法时，会调用 __call 方法。（当在静态方法中调用一个未定义的或没有权限的成员方法时，则会调用 __callStatic 方法。）如果本类找不到调用的成员方法，会去父类中找。如果本类找不到 __call 方法，会去父类中找。</li><li><code>__get</code>:当调用一个未定义的或非公有的成员属性时，会调用 __get 方法。</li><li><code>__set</code>: 当给一个未定义的或非公有的成员属性赋值时， 会调用 __set 方法。</li><li><code>__isset</code>:当在一个未定义的或非公有的成员属性上调用 isset函数时，会调用 __isset 方法。</li><li><code>__unset</code>:当在一个未定义或非公有的成员属性上调用 unset函数时，会调用 __unset 方法。</li><li><code>__toString</code>:在打印输出一个对象时, 会自动调用 __toString 方法。 例: echo 对象名。</li><li><code>__clone</code>:当克隆一个对象时, 会自动调用 __clone 方法。 例: $clone_obj = clone 对象名;</li><li><code>__autoload</code>:在实例化一个尚未被定义的类时会自动调用 __autoload 来加载类文件。</li><li><code>__invoke</code>:当尝试以调用函数的方式调用一个对象时, 会自动调用 __invoke 方法。</li><li><code>__sleep</code>:serialize() 函数会检查类中是否存在 __sleep 方法，如果存在，先执行 __sleep 方法，再执行 序列化操作。</li></ol><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-php"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> User</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> __sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    $</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">obj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> User</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    serialize</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">($</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">obj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="13"><li><code>__wakeup</code>:unserialize() 函数会检查类中是否存在 __wakeup 方法，如果存在，先执行 __wakeup 方法，再执行 反序列化操作。</li></ol><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-php"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> User</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> __wakeup</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">$</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">obj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> User</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">unserialize</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">($</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">obj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="php魔术常量" tabindex="-1"><a class="header-anchor" href="#php魔术常量"><span>PHP魔术常量</span></a></h2><p>PHP 含有 9 个魔术常量。它们的值随着它们在代码中的位置改变而改变。</p><table><thead><tr><th style="text-align:center;">名称</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>LINE</strong></td><td style="text-align:center;">文件中的当前行号</td></tr><tr><td style="text-align:center;"><strong>FILE</strong></td><td style="text-align:center;">文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名。</td></tr><tr><td style="text-align:center;"><strong>DIR</strong></td><td style="text-align:center;">文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。它等价于 dirname(<strong>FILE</strong>)。除非是根目录，否则目录中名不包括末尾的斜杠。</td></tr><tr><td style="text-align:center;"><strong>NAMESPACE</strong></td><td style="text-align:center;">当前命名空间的名称。</td></tr><tr><td style="text-align:center;"><strong>TRAIT</strong></td><td style="text-align:center;">Trait 的名字。Trait 名包括其被声明的作用域（例如 Foo\\Bar）。</td></tr><tr><td style="text-align:center;"><strong>CLASS</strong></td><td style="text-align:center;">当前类的名称。类名包括其被声明的作用域（例如 Foo\\Bar）。当用在 trait 方法中时，CLASS 是调用 trait 方法的类的名字。</td></tr><tr><td style="text-align:center;"><strong>FUNCTION</strong></td><td style="text-align:center;">当前函数的名称。匿名函数则为 {closure}。</td></tr><tr><td style="text-align:center;"><strong>METHOD</strong></td><td style="text-align:center;">类的方法名。</td></tr><tr><td style="text-align:center;">ClassName::class</td><td style="text-align:center;">完整的类名。</td></tr></tbody></table><h2 id="php超全局变量" tabindex="-1"><a class="header-anchor" href="#php超全局变量"><span>PHP超全局变量</span></a></h2><p>PHP 有 9 个超全局变量:<code>$_SERVER</code>、<code>$_GET</code>、<code>$_POST</code>、<code>$_REQUEST</code>、<code>$_COOKIE</code>、<code>$_SESSION</code>、<code>$_FILES</code>、<code>$_ENV</code>、<code>$GLOBALS</code></p><ul><li><code>$_SERVER</code><ul><li>$_SERVER: 一个包含了诸如头信息（header）、路径（path）、以及脚本位置（srcipt location）等信息的数组。这个数组中的项目由Web服务器创建。 <blockquote><p><strong>常用 $_SERVER 中的参数</strong></p><table><thead><tr><th style="text-align:center;">参数</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">$_SERVER[&#39;SERVER_NAME&#39;]</td><td style="text-align:center;">当前运行脚本所在服务器主机的名称</td></tr><tr><td style="text-align:center;">$_SERVER[&#39;REQUEST_METHOD&#39;]</td><td style="text-align:center;">访问页面时的请求方法。例如：GET、HEAD，POST，PUT</td></tr><tr><td style="text-align:center;">$_SERVER[&#39;QUERY_STRING&#39;]</td><td style="text-align:center;">查询(query)的字符串。例如: www.bqhub.com?a=1 。 则 获取到的值为 “a=1”</td></tr><tr><td style="text-align:center;">$_SERVER[&#39;REQUEST_URI&#39;]</td><td style="text-align:center;">访问此页面所需的URI。例如: www.bqhub.com?a=1 。 则 获取到的值为 “/?a=1”</td></tr><tr><td style="text-align:center;">$_SERVER[&#39;SCRIPT_NAME&#39;]</td><td style="text-align:center;">包含当前脚本的路径。 例如: index.php</td></tr><tr><td style="text-align:center;">$_SERVER[&#39;PHP_SELF&#39;]</td><td style="text-align:center;">当前正在执行的脚本文件名。</td></tr><tr><td style="text-align:center;">$_SERVER[&#39;REMOTE_ADDR&#39;]</td><td style="text-align:center;">当前页面用户的IP地址。</td></tr><tr><td style="text-align:center;">$_SERVER[&#39;REMOTE_HOST&#39;]</td><td style="text-align:center;">当前页面用户的主机名。</td></tr></tbody></table></blockquote></li></ul></li><li><code>$_GET</code> 可以获取到使用 get 方法传递的参数的相关信息。</li><li><code>$_POST</code> 可以获取到使用 post 方法传递的参数的相关信息。</li><li><code>$_REQUEST</code> 是一个关联数组，默认包含 <code>$_GET</code>、<code>$_POST</code>、<code>$_COOKIE</code> 中的内容。建议不用这个超级变量，因为它不够安全。</li><li><code>$_COOKIE</code> 是一个关联数组，包含 通过 HTTP cookie 传递给当前脚本的内容。</li><li><code>$_SESSION</code> 是一个关联数组，包含当前脚本中的所有 session 内容。</li><li><code>$_FILES</code> 是一个关联数组，包含通过 HTTP POST 方法上传给当前脚本的文件内容。</li><li><code>$_ENV</code> 是一个包含服务器端环境变量的数组。</li><li><code>$GLOBALS</code> 是一个关联数组， 包含对当前脚本全局 范围内定义的所有变量。</li></ul><h2 id="php-错误级别介绍与设置错误级别的方式" tabindex="-1"><a class="header-anchor" href="#php-错误级别介绍与设置错误级别的方式"><span>PHP 错误级别介绍与设置错误级别的方式</span></a></h2><h3 id="常见错误级别有" tabindex="-1"><a class="header-anchor" href="#常见错误级别有"><span>常见错误级别有：</span></a></h3><ul><li><code>E_ERROR</code> : 致命的运行错误并阻止脚本执行</li><li><code>E_WARNING</code> : 运行时警告</li><li><code>E_PARSE</code> : 解析错误</li><li><code>E_NOTICE</code> : 注意</li><li><code>E_USER_ERROR</code> : 用户生成的错误消息</li><li><code>E_USER_WARNING</code> : 用户生成的警告</li><li><code>E_USER_NOTICE</code> : 用户生成的注意</li><li><code>E_ALL</code> : 所有的错误、警告、注意</li></ul><h3 id="设置错误级别的方式" tabindex="-1"><a class="header-anchor" href="#设置错误级别的方式"><span>设置错误级别的方式:</span></a></h3><ul><li>修改 php.ini 配置文件 <ul><li>例: error_reporting = E_ALL &amp; ~E_NOTICE, 表示报告除 E_NOTICE 之外的所有错误。</li></ul></li><li>error_reporting 函数设置 <ul><li>例: error_reporting(E_ERROR | E_WARNING);</li></ul></li></ul><h2 id="php异常处理" tabindex="-1"><a class="header-anchor" href="#php异常处理"><span>PHP异常处理</span></a></h2><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-php"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;?</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">php</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   # php 使用 try catch 来捕获异常</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   # 例: </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">   try</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">   {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">       if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ($</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> throw</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> Exception</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">数量不可超过 10 个</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">       if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ($</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">width</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 100</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> throw</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> widthException</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">宽度不可超过 100 米</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">       if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ($</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">height</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 150</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> throw</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> heightException</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">高度不可超过 150 米</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">   }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">Exception</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> $</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">       # 常用异常捕获信息</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">       echo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> $</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getLine</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">       echo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> $</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getCode</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">       echo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> $</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getFile</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">       echo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> $</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getMessage</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">   }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">heightException</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> $</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">       echo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> $</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getMessage</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">   }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">widthException</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> $</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">       echo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> $</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getMessage</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">   }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21)]))}const p=s(n,[["render",l]]),k=JSON.parse('{"path":"/interview/php/%E5%9F%BA%E7%A1%80%E7%AF%87/","title":"基础篇","lang":"zh-CN","frontmatter":{"title":"基础篇","createTime":"2025/07/07 16:16:41","permalink":"/interview/php/基础篇/","description":"php基本变量类型 四种标量类型 ：boolean （布尔型）、integer （整型）、float （浮点型, 也称作 double)、string （字符串） 四种复合类型 ：array （数组）、object （对象）、callable、iterable 最后是两种特殊类型 ：resource（资源）、NULL（NULL） PHP魔术方法 13个...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础篇\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-08T08:24:00.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://docs.sreio.com/interview/php/%E5%9F%BA%E7%A1%80%E7%AF%87/"}],["meta",{"property":"og:site_name","content":"Sreio Docs"}],["meta",{"property":"og:title","content":"基础篇"}],["meta",{"property":"og:description","content":"php基本变量类型 四种标量类型 ：boolean （布尔型）、integer （整型）、float （浮点型, 也称作 double)、string （字符串） 四种复合类型 ：array （数组）、object （对象）、callable、iterable 最后是两种特殊类型 ：resource（资源）、NULL（NULL） PHP魔术方法 13个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-08T08:24:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-08T08:24:00.000Z"}]]},"readingTime":{"minutes":4.86,"words":1458},"git":{"createdTime":1751877858000,"updatedTime":1751963040000,"contributors":[{"name":"sreio","username":"sreio","email":"ingwei@163.com","commits":4,"avatar":"https://avatars.githubusercontent.com/sreio?v=4","url":"https://github.com/sreio"}],"changelog":[{"hash":"bf0bdcec211a9950410d1b4156307431dc19d577","time":1751963040000,"email":"ingwei@163.com","author":"sreio","message":"update"},{"hash":"90d9e39fcb41faa1fc64c463141d0d7edf8ee58a","time":1751960063000,"email":"ingwei@163.com","author":"sreio","message":"update"},{"hash":"066c6248983ad7feba746c5bfc01203e48752ed3","time":1751878089000,"email":"ingwei@163.com","author":"sreio","message":"面试"},{"hash":"5be24b01f97e53b886885abde519c2e0cc6b3447","time":1751877858000,"email":"ingwei@163.com","author":"sreio","message":"面试"}]},"autoDesc":true,"filePathRelative":"interview/PHP/1.基础篇.md","headers":[]}');export{p as comp,k as data};
