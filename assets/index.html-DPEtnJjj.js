import{_ as i,c as e,e as a,o as l}from"./app-DDsjqNbb.js";const n={};function t(h,s){return l(),e("div",null,s[0]||(s[0]=[a(`<h2 id="_1-前置教程" tabindex="-1"><a class="header-anchor" href="#_1-前置教程"><span>1.前置教程</span></a></h2><p>请先阅读下面章节，了解相关知识</p><ul><li>RabbitMQ基础概念</li><li>RabbitMQ Work模式</li><li>RabbitMQ PHP快速入门章节 （必读，因为后续章节不会重复贴代码，仅展示关键代码）</li></ul><h2 id="_2-php实现多个消费者" tabindex="-1"><a class="header-anchor" href="#_2-php实现多个消费者"><span>2.PHP实现多个消费者</span></a></h2><p>PHP因为自己本身不支持多线程、协程之类的并发技术，通常使用多进程方式实现并发处理，这里使用多进程模式实现多个消费者并发消费队列内的消息。</p><h3 id="_2-1-手动启动多个进程" tabindex="-1"><a class="header-anchor" href="#_2-1-手动启动多个进程"><span>2.1.手动启动多个进程</span></a></h3><p>要实现多进程，最简单的办法就是手动运行多次PHP命令即可。 例如： 上一个章节中的消费者脚本为：recv.php</p><p>我们可以打开多个shell窗口重复执行消费者脚本即可</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 下面启动两个消费者</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># shell窗口1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">php</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> recv.php</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># shell窗口2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">php</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> recv.php</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以这样:</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># shell窗口1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">php</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> recv.php</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">php</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> recv.php</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在同一个shell窗口内，将脚本放到后台运行</p><blockquote><p>说明：这种手动启动多个php脚本的方式实现多个消费者，缺点就是进程不好维护，没有进程监控，如果进程挂了，不会自动重启。</p></blockquote><h2 id="_2-2-supervisor实现多进程" tabindex="-1"><a class="header-anchor" href="#_2-2-supervisor实现多进程"><span>2.2.Supervisor实现多进程</span></a></h2><p>Supervisor 是 Linux 操作系统下中的一个进程监控器，通过Supervisor可以监控php进程，如果php进程挂了会自动重启，也可以配置进程的并发数，这样可以轻松实现多个消费者并发处理消息。</p><p>下面以Ubuntu为例，其他Linux类似</p><p>安装supervisor</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sudo</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> apt-get</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> supervisor</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>配置 Supervisor Supervisor 的配置文件通常位于 /etc/supervisor/conf.d 目录下。在该目录中，你可以创建任意数量的配置文件，用来告诉supervisor 怎么监控我们的进程。例如，创建一个rabbitmq-worker.conf 文件, 用来监控我们的消费者进程。</p><p>例子: 文件: rabbitmq-worker.conf</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">program:rabbitmq-worker</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">process_name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">%</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">program_name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">s_%</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">process_num</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">02d</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">command</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">php</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> recv.php</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">autostart</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">true</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">autorestart</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">true</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">user</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">root</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">numprocs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">10</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">redirect_stderr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">true</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">stdout_logfile</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/var/log/worker.log</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数说明：</p><ul><li><code>process_name</code> - 进程名字定义，可以随便命名, 这里用了两个变量program_name(进程名)和process_num（进程编号）</li><li><code>command</code> - 我们需要运行的命令</li><li><code>autostart</code> - 是否开机启动</li><li><code>autorestart</code> - 是否自动重启</li><li><code>user</code> - 使用哪个系统账号运行命令</li><li><code>numprocs</code> - 进程并发数，打算启动几个进程</li><li><code>stdout_logfile</code> - 运行日志文件保存在哪里</li></ul>`,23)]))}const r=i(n,[["render",t]]),d=JSON.parse('{"path":"/queue/RabbitMQ/php/work%E6%A8%A1%E5%BC%8F/","title":"work模式","lang":"zh-CN","frontmatter":{"title":"work模式","createTime":"2025/07/07 17:01:36","permalink":"/queue/RabbitMQ/php/work模式/","description":"1.前置教程 请先阅读下面章节，了解相关知识 RabbitMQ基础概念 RabbitMQ Work模式 RabbitMQ PHP快速入门章节 （必读，因为后续章节不会重复贴代码，仅展示关键代码） 2.PHP实现多个消费者 PHP因为自己本身不支持多线程、协程之类的并发技术，通常使用多进程方式实现并发处理，这里使用多进程模式实现多个消费者并发消费队列内的...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"work模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-07T09:20:08.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://docs.sreio.com/queue/RabbitMQ/php/work%E6%A8%A1%E5%BC%8F/"}],["meta",{"property":"og:site_name","content":"Sreio Docs"}],["meta",{"property":"og:title","content":"work模式"}],["meta",{"property":"og:description","content":"1.前置教程 请先阅读下面章节，了解相关知识 RabbitMQ基础概念 RabbitMQ Work模式 RabbitMQ PHP快速入门章节 （必读，因为后续章节不会重复贴代码，仅展示关键代码） 2.PHP实现多个消费者 PHP因为自己本身不支持多线程、协程之类的并发技术，通常使用多进程方式实现并发处理，这里使用多进程模式实现多个消费者并发消费队列内的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-07T09:20:08.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-07T09:20:08.000Z"}]]},"readingTime":{"minutes":2.05,"words":614},"git":{"createdTime":1751879564000,"updatedTime":1751880008000,"contributors":[{"name":"sreio","username":"sreio","email":"ingwei@163.com","commits":2,"avatar":"https://avatars.githubusercontent.com/sreio?v=4","url":"https://github.com/sreio"}],"changelog":[{"hash":"b1a29473898823721d9b7179def77b7f7a62cff7","time":1751880008000,"email":"ingwei@163.com","author":"sreio","message":"fixed"},{"hash":"ec6b65d5f5e156de0bddee87610673d45a5591df","time":1751879564000,"email":"ingwei@163.com","author":"sreio","message":"queue"}]},"autoDesc":true,"filePathRelative":"queue/2.RabbitMQ教程/5.php/2.work模式.md","headers":[]}');export{r as comp,d as data};
