import{_ as i,c as a,e as n,o as e}from"./app-DDsjqNbb.js";const l="/assets/7-1-C6lE-QGp.png",h={};function t(p,s){return e(),a("div",null,s[0]||(s[0]=[n('<h2 id="_1-什么是代理模式" tabindex="-1"><a class="header-anchor" href="#_1-什么是代理模式"><span>1. 什么是代理模式</span></a></h2><p>代理模式是一种结构型设计模式，充当一个代理，控制某个对象的访问。代理模式基于目标对象（被代理对象）提供了一个代理对象，客户端通过代理对象来访问目标对象，从而可以在目标对象的基础上增加额外的功能。</p><h3 id="_1-1-代理模式的定义" tabindex="-1"><a class="header-anchor" href="#_1-1-代理模式的定义"><span>1.1 代理模式的定义</span></a></h3><p>代理模式是一种由两个或多个对象协同工作的设计模式。其中，一个对象是真正要调用的目标对象，而其他一个或多个对象充当代理对象。代理对象通过拦截对目标对象的访问，提供了一种间接访问目标对象的方式。</p><h3 id="_1-2-代理模式的作用和目的" tabindex="-1"><a class="header-anchor" href="#_1-2-代理模式的作用和目的"><span>1.2 代理模式的作用和目的</span></a></h3><p>代理模式的主要目的是为了给目标对象提供一种间接访问的方式，从而能够在访问目标对象的基础上添加额外的功能。代理对象可以处理一些公共的逻辑，例如对目标对象的访问控制、缓存、日志记录等。代理模式还可以实现懒汉式加载，即当需要访问目标对象时再进行实例化。</p><h2 id="_2-代理模式的特点和优点" tabindex="-1"><a class="header-anchor" href="#_2-代理模式的特点和优点"><span>2. 代理模式的特点和优点</span></a></h2><p>代理模式具## 有以下特点和优点：</p><ul><li>可以在不修改目标对象的情况下扩展其功能。</li><li>可以通过代理对象对目标对象的访问进行控制。</li><li>可以在访问目标对象之前或之后执行一些附加操作。</li><li>可以实现懒汉式加载，即当需要访问目标对象时再进行实例化。</li></ul><h2 id="_3-代理模式的实际应用场景举例" tabindex="-1"><a class="header-anchor" href="#_3-代理模式的实际应用场景举例"><span>3. 代理模式的实际应用场景举例</span></a></h2><p>代理模式在许多应用场景中有着广泛的应用，以下是一些常见的实际应用场景举例：</p><ul><li>远程代理：用于对网络上的对象进行本地化访问。</li><li>虚拟代理：用于根据需要创建高开销的对象。</li><li>安全代理：用于控制对对象的访问权限。</li><li>智能引用：用于在访问对象时执行一些额外操作，例如对对象的计数等。</li></ul><h2 id="_4-golang中的代理模式实现" tabindex="-1"><a class="header-anchor" href="#_4-golang中的代理模式实现"><span>4. Golang中的代理模式实现</span></a></h2><h3 id="_4-1-uml类图" tabindex="-1"><a class="header-anchor" href="#_4-1-uml类图"><span>4.1 UML类图</span></a></h3><p>以下是Golang中代理模式的UML类图：</p><figure><img src="'+l+`" alt="" tabindex="0" loading="lazy" width="388" height="217"><figcaption></figcaption></figure><h3 id="_4-2-示例介绍" tabindex="-1"><a class="header-anchor" href="#_4-2-示例介绍"><span>4.2 示例介绍</span></a></h3><p>假设我们有一个接口Subject，其中定义了一个Request方法。我们有一个具体实现类RealSubject，它实现了Subject接口。然后我们创建了一个代理类Proxy，它持有一个RealSubject对象，并实现了Subject接口。在Proxy类的Request方法中，我们可以在调用RealSubject的Request方法之前或之后执行一些额外的操作。</p><h3 id="_4-3-实现步骤1-定义代理接口" tabindex="-1"><a class="header-anchor" href="#_4-3-实现步骤1-定义代理接口"><span>4.3 实现步骤1: 定义代理接口</span></a></h3><p>首先，我们需要定义一个Subject接口，其中包含一个Request方法:</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-go"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">package</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">type</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Subject</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> interface</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    Request</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-实现步骤2-实现被代理对象" tabindex="-1"><a class="header-anchor" href="#_4-4-实现步骤2-实现被代理对象"><span>4.4 实现步骤2: 实现被代理对象</span></a></h3><p>接下来，我们实现具体的被代理对象RealSubject，它实现了Subject接口:</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-go"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">package</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">fmt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">type</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> RealSubject</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> struct</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">func</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">r </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">RealSubject</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Request</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    fmt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">RealSubject: Handling Request</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-5-实现步骤3-实现代理对象" tabindex="-1"><a class="header-anchor" href="#_4-5-实现步骤3-实现代理对象"><span>4.5 实现步骤3: 实现代理对象</span></a></h3><p>然后，我们创建一个代理对象Proxy，它持有一个RealSubject对象，并实现了Subject接口。在Proxy的Request方法中，我们可以在调用RealSubject的Request方法之前或之后执行一些额外的操作:</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-go"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">package</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">fmt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">type</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Proxy</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> struct</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    realSubject</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">RealSubject</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">func</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">p </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Proxy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Request</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    fmt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Proxy: Pre-Request</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">realSubject</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> nil</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">realSubject</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">RealSubject</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">realSubject</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Request</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    fmt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Proxy: Post-Request</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-6-实现步骤4-调用代理对象" tabindex="-1"><a class="header-anchor" href="#_4-6-实现步骤4-调用代理对象"><span>4.6 实现步骤4: 调用代理对象</span></a></h3><p>最后，我们可以使用代理对象Proxy来调用被代理对象RealSubject的方法：</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-go"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">package</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">func</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    proxy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :=</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Proxy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{}</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    proxy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Request</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行以上代码，输出结果为：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Proxy: Pre-Request</span></span>
<span class="line"><span>RealSubject: Handling Request</span></span>
<span class="line"><span>Proxy: Post-Request</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-代理模式的热点问题解析" tabindex="-1"><a class="header-anchor" href="#_5-代理模式的热点问题解析"><span>5. 代理模式的热点问题解析</span></a></h2><h3 id="_5-1-代理模式和装饰器模式的区别和联系" tabindex="-1"><a class="header-anchor" href="#_5-1-代理模式和装饰器模式的区别和联系"><span>5.1 代理模式和装饰器模式的区别和联系</span></a></h3><p>代理模式和装饰器模式都是结构型设计模式，它们都包含一个目标对象和一个代理/装饰器对象。然而，两者之间存在一些区别：</p><ul><li>代理模式一般是一个对目标对象的访问控制，而装饰器模式更关注对目标对象的扩展。</li><li>代理模式通常在目标对象之前或之后执行一些附加操作，而装饰器模式则是在目标对象的基础上动态添加额外的功能。</li></ul><h3 id="_5-2-静态代理和动态代理的比较" tabindex="-1"><a class="header-anchor" href="#_5-2-静态代理和动态代理的比较"><span>5.2 静态代理和动态代理的比较</span></a></h3><p>代理模式可以分为静态代理和动态代理。静态代理是在编译时就已经确定代理对象的类型，代理对象是由程序员手动编写的。动态代理则是在运行时动态生成代理对象，代理对象是由代理框架根据目标对象的接口自动生成的。相比而言，动态代理更加灵活，但也更加复杂。</p><h3 id="_5-3-代理模式在微服务中的应用" tabindex="-1"><a class="header-anchor" href="#_5-3-代理模式在微服务中的应用"><span>5.3 代理模式在微服务中的应用</span></a></h3><p>代理模式可以应用于微服务架构中。例如，我们可以使用代理来封装对其他微服务的访问，并在代理层实现负载均衡、限流、熔断等机制。这样可以提高系统的可靠性和性能。代理模式还可以用于服务发现和路由功能的实现。</p>`,40)]))}const r=i(h,[["render",t]]),d=JSON.parse('{"path":"/golang/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/","title":"代理模式","lang":"zh-CN","frontmatter":{"title":"代理模式","createTime":"2025/07/08 09:45:34","permalink":"/golang/设计模式/代理模式/","description":"1. 什么是代理模式 代理模式是一种结构型设计模式，充当一个代理，控制某个对象的访问。代理模式基于目标对象（被代理对象）提供了一个代理对象，客户端通过代理对象来访问目标对象，从而可以在目标对象的基础上增加额外的功能。 1.1 代理模式的定义 代理模式是一种由两个或多个对象协同工作的设计模式。其中，一个对象是真正要调用的目标对象，而其他一个或多个对象充当...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"代理模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-08T02:28:08.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://docs.sreio.com/golang/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"}],["meta",{"property":"og:site_name","content":"Sreio Docs"}],["meta",{"property":"og:title","content":"代理模式"}],["meta",{"property":"og:description","content":"1. 什么是代理模式 代理模式是一种结构型设计模式，充当一个代理，控制某个对象的访问。代理模式基于目标对象（被代理对象）提供了一个代理对象，客户端通过代理对象来访问目标对象，从而可以在目标对象的基础上增加额外的功能。 1.1 代理模式的定义 代理模式是一种由两个或多个对象协同工作的设计模式。其中，一个对象是真正要调用的目标对象，而其他一个或多个对象充当..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-08T02:28:08.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-08T02:28:08.000Z"}]]},"readingTime":{"minutes":4.58,"words":1375},"git":{"createdTime":1751941688000,"updatedTime":1751941688000,"contributors":[{"name":"sreio","username":"sreio","email":"ingwei@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/sreio?v=4","url":"https://github.com/sreio"}],"changelog":[{"hash":"d57fb21cb27927b0c89eb7f1047937b7a671c0a1","time":1751941688000,"email":"ingwei@163.com","author":"sreio","message":"go"}]},"autoDesc":true,"filePathRelative":"golang/2.设计模式/2.结构型模式/7.代理模式.md","headers":[]}');export{r as comp,d as data};
