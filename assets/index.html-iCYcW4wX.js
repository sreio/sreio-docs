import{_ as s,c as a,e,o as n}from"./app-DDsjqNbb.js";const t={};function l(p,i){return n(),a("div",null,i[0]||(i[0]=[e(`<div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-php"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;?</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">php</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * Laravel - A PHP Framework For Web Artisans</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> *</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@package</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  Laravel</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@author</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   Taylor Otwell &lt;taylor@laravel.com&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">define</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">LARAVEL_START</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> microtime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一行代码，只是简单定义了一个全局常量，并将其值设置为当前时间的时间戳 + 微秒数(小数点后4位)。这是方便在合适的地方计算代码运行时间的一个常量。值得注意的是，我们在框架内全局搜索&quot;LARAVEL_START&quot;关键词时，并没有任何发现，说明这行代码是框架预留的，在5.8.38版本中并没有实际的用处。</p><blockquote><p>mircotime函数如果不加任何参数，返回的是一个空格隔开的字符串，时间戳 + 微秒数）</p></blockquote><p>接下来这行代码：</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-php"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">require</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> __DIR__</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/../vendor/autoload.php</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>vendor目录实际上是第三方库的目录，使用composer来进行包管理。 因为包含了这个autoload.php文件，在之后的所有php代码中任何使用vendor目录中的类语句(这些包都是按照文件夹独立开来的)，直接引用类名即可，无需再显示包含类文件本身。</p><p>比如，我们很快会阅读的app.php（bootstrap/app.php）中，第14行 ~ 16行代码：</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-php"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">$</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">app</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> Illuminate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">\\</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">Foundation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">\\</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">Application</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    $</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_ENV</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">APP_BASE_PATH</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ??</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> dirname</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">__DIR__</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看到，这里直接实例化了一个Application对象，如果没有之前的包含autoload.php文件语句，这里肯定会报错。一个简单的验证方法是，注释<code>require __DIR__.&#39;/../vendor/autoload.php</code>语句，直接刷新页面，报错：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Fatal error: Uncaught Error: Class &#39;Illuminate\\Foundation\\Application&#39; not found in /home/vagrant/code/blog5/bootstrap/app.php:14 Stack trace: #0 /home/vagrant/code/blog5/public/index.php(38): require_once() #1 {main} thrown in /home/vagrant/code/blog5/bootstrap/app.php on line 14</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>继续追踪autoload.php中的代码，最终可以发现，composer使用了<code>spl_autoload_register</code>这个核心函数，来完成对PHP类的自动加载。</p><p>这里，我们不再对composer的包自动加载机制做过多的讲解，感兴趣的读者可以阅读下面这两篇文章。</p><p><strong>参考链接：</strong></p><ul><li>https://segmentfault.com/a/1190000014948542</li><li>https://www.cnblogs.com/a609251438/p/12659934.html</li></ul>`,14)]))}const r=s(t,[["render",l]]),d=JSON.parse('{"path":"/php/8de6wl69/","title":"第三章：实现自动加载","lang":"zh-CN","frontmatter":{"title":"第三章：实现自动加载","createTime":"2025/07/08 10:34:23","permalink":"/php/8de6wl69/","description":"第一行代码，只是简单定义了一个全局常量，并将其值设置为当前时间的时间戳 + 微秒数(小数点后4位)。这是方便在合适的地方计算代码运行时间的一个常量。值得注意的是，我们在框架内全局搜索\\"LARAVEL_START\\"关键词时，并没有任何发现，说明这行代码是框架预留的，在5.8.38版本中并没有实际的用处。 mircotime函数如果不加任何参数，返回的是一...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第三章：实现自动加载\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-09T01:20:36.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://docs.sreio.com/php/8de6wl69/"}],["meta",{"property":"og:site_name","content":"Sreio Docs"}],["meta",{"property":"og:title","content":"第三章：实现自动加载"}],["meta",{"property":"og:description","content":"第一行代码，只是简单定义了一个全局常量，并将其值设置为当前时间的时间戳 + 微秒数(小数点后4位)。这是方便在合适的地方计算代码运行时间的一个常量。值得注意的是，我们在框架内全局搜索\\"LARAVEL_START\\"关键词时，并没有任何发现，说明这行代码是框架预留的，在5.8.38版本中并没有实际的用处。 mircotime函数如果不加任何参数，返回的是一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-09T01:20:36.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-09T01:20:36.000Z"}]]},"readingTime":{"minutes":1.68,"words":504},"git":{"createdTime":1751942180000,"updatedTime":1752024036000,"contributors":[{"name":"sreio","username":"sreio","email":"ingwei@163.com","commits":3,"avatar":"https://avatars.githubusercontent.com/sreio?v=4","url":"https://github.com/sreio"}],"changelog":[{"hash":"0b7d61f08c563d6514d6336c56fa0848a69e46eb","time":1752024036000,"email":"ingwei@163.com","author":"sreio","message":"README"},{"hash":"a16a3f8c5e99bfa6f2a99f497d8114454ed414e3","time":1751962383000,"email":"ingwei@163.com","author":"sreio","message":"rename"},{"hash":"7d36c2822e978ef31a2cebd3a69e67c3b9a172e9","time":1751942180000,"email":"ingwei@163.com","author":"sreio","message":"php"}]},"autoDesc":true,"filePathRelative":"php/4.穿透Laravel/3.第三章：实现自动加载/README.md","headers":[]}');export{r as comp,d as data};
