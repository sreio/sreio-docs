import{_ as s,c as t,e as a,o as e}from"./app-DDsjqNbb.js";const n={};function l(h,i){return e(),t("div",null,i[0]||(i[0]=[a(`<h2 id="基本类型" tabindex="-1"><a class="header-anchor" href="#基本类型"><span>基本类型</span></a></h2><table><thead><tr><th style="text-align:center;">类型</th><th style="text-align:center;">长度(字节)</th><th style="text-align:center;">默认值</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">bool</td><td style="text-align:center;">1</td><td style="text-align:center;">false</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">byte</td><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:center;">uint8</td></tr><tr><td style="text-align:center;">rune</td><td style="text-align:center;">4</td><td style="text-align:center;">0</td><td style="text-align:center;">Unicode Code Point, int32</td></tr><tr><td style="text-align:center;">int, uint</td><td style="text-align:center;">4或8</td><td style="text-align:center;">0</td><td style="text-align:center;">32 或 64 位</td></tr><tr><td style="text-align:center;">int8, uint8</td><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:center;">-128 ~ 127, 0 ~ 255，byte是uint8 的别名</td></tr><tr><td style="text-align:center;">int16, uint16</td><td style="text-align:center;">2</td><td style="text-align:center;">0</td><td style="text-align:center;">-32768 ~ 32767, 0 ~ 65535</td></tr><tr><td style="text-align:center;">int32, uint32</td><td style="text-align:center;">4</td><td style="text-align:center;">0</td><td style="text-align:center;">-21亿~ 21亿, 0 ~ 42亿，rune是int32 的别名</td></tr><tr><td style="text-align:center;">int64, uint64</td><td style="text-align:center;">8</td><td style="text-align:center;">0</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">float32</td><td style="text-align:center;">4</td><td style="text-align:center;">0.0</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">float64</td><td style="text-align:center;">8</td><td style="text-align:center;">0.0</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">complex64</td><td style="text-align:center;">8</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">complex128</td><td style="text-align:center;">16</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">uintptr</td><td style="text-align:center;">4或8</td><td style="text-align:center;"></td><td style="text-align:center;">以存储指针的 uint32 或 uint64 整数</td></tr><tr><td style="text-align:center;">array</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">值类型</td></tr><tr><td style="text-align:center;">struct</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">值类型</td></tr><tr><td style="text-align:center;">string</td><td style="text-align:center;"></td><td style="text-align:center;">&quot;&quot;</td><td style="text-align:center;">UTF-8 字符串</td></tr><tr><td style="text-align:center;">slice</td><td style="text-align:center;"></td><td style="text-align:center;">nil</td><td style="text-align:center;">引用类型</td></tr><tr><td style="text-align:center;">map</td><td style="text-align:center;"></td><td style="text-align:center;">nil</td><td style="text-align:center;">引用类型</td></tr><tr><td style="text-align:center;">channel</td><td style="text-align:center;"></td><td style="text-align:center;">nil</td><td style="text-align:center;">引用类型</td></tr><tr><td style="text-align:center;">interface</td><td style="text-align:center;"></td><td style="text-align:center;">nil</td><td style="text-align:center;">接口</td></tr><tr><td style="text-align:center;">function</td><td style="text-align:center;"></td><td style="text-align:center;">nil</td><td style="text-align:center;">函数</td></tr></tbody></table><div class="hint-container note"><p class="hint-container-title">支持八进制、 六进制，以及科学记数法。标准库 <code>math</code> 定义了各数字类型取值范围。</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-go"><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> d</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 071</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> 0x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">e</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">9</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> math</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">MinInt16</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><div class="hint-container warning"><p class="hint-container-title">空指针值 <code>nil</code>，而非<code>C/C++</code>中的<code>NULL</code></p></div><h3 id="整型" tabindex="-1"><a class="header-anchor" href="#整型"><span>整型</span></a></h3><div class="hint-container note"><p class="hint-container-title">整型：</p><ul><li>按长度分为： <ul><li>int8、int16、int32、int64</li></ul></li><li>对应无符号整型 <ul><li>uint8、uint16、uint32、uint64</li></ul></li></ul><p>其中，<code>uint8</code>就是我们熟知的<code>byte</code>型，<code>int16</code>对应C语言中的<code>short</code>型，<code>int64</code>对应C语言中的<code>long</code>型</p></div><h3 id="浮点数" tabindex="-1"><a class="header-anchor" href="#浮点数"><span>浮点数</span></a></h3><p><code>Go</code>语言支持两种浮点型数：<code>float32</code>和<code>float64</code>。这两种浮点型数据格式遵循<code>IEEE 754</code>标准：</p><ul><li><code>float32</code> 的浮点数的最大范围约为<code>3.4e38</code>，可以使用常量定义：<code>math.MaxFloat32</code>。</li><li><code>float64</code> 的浮点数的最大范围约为 <code>1.8e308</code>，可以使用一个常量定义：<code>math.MaxFloat64</code>。</li></ul><h3 id="复数" tabindex="-1"><a class="header-anchor" href="#复数"><span>复数</span></a></h3><p><code>complex64</code>和<code>complex128</code></p><p>复数有实部和虚部，<code>complex64</code>的实部和虚部为32位，<code>complex128</code>的实部和虚部为64位。</p><h3 id="布尔值" tabindex="-1"><a class="header-anchor" href="#布尔值"><span>布尔值</span></a></h3><p><code>Go</code>语言中以<code>bool</code>类型进行声明布尔型数据，布尔型数据只有<code>true（真）</code>和<code>false（假）</code>两个值。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>Go 语言中不允许将<code>整型</code>强制转换为<code>布尔型</code>. <code>布尔型</code>无法参与<code>数值</code>运算，也无法与其他类型进行转换。</p></div><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h3><p><code>Go</code> 语言里的字符串的内部实现使用<code>UTF-8</code>编码。 字符串的值为双引号<code>&quot;</code>之间的内容，可以在<code>Go</code>语言的源码中直接添加<strong>非ASCII</strong>码字符</p><h3 id="字符串转义符" tabindex="-1"><a class="header-anchor" href="#字符串转义符"><span>字符串转义符</span></a></h3><p><code>Go</code> 语言的字符串常见转义符包含<code>回车</code>、<code>换行</code>、<code>单双引号</code>、<code>制表符</code>等，如下表所示:</p><table><thead><tr><th style="text-align:center;"><div style="width:10em;">转义</div></th><th style="text-align:center;"><div style="width:10em;">含义</div></th></tr></thead><tbody><tr><td style="text-align:center;">\\r</td><td style="text-align:center;">回车符（返回行首）</td></tr><tr><td style="text-align:center;">\\n</td><td style="text-align:center;">换行符（直接跳到下一行的同列位置）</td></tr><tr><td style="text-align:center;">\\t</td><td style="text-align:center;">制表符</td></tr><tr><td style="text-align:center;">&#39;</td><td style="text-align:center;">单引号</td></tr><tr><td style="text-align:center;">&quot;</td><td style="text-align:center;">双引号</td></tr><tr><td style="text-align:center;">\\</td><td style="text-align:center;">反斜杠</td></tr></tbody></table><h3 id="多行字符" tabindex="-1"><a class="header-anchor" href="#多行字符"><span>多行字符</span></a></h3><p><code>Go</code>语言中要定义一个多行字符串时，就必须使用<code>反引号</code>字符</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-go"><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> \`</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">line 1</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">line 2</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">line 3</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fmt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">s1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 反引号间换行将被作为字符串中的换行，但是所有的转义字符均无效，文本将会原样输出。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串的常用操作" tabindex="-1"><a class="header-anchor" href="#字符串的常用操作"><span>字符串的常用操作</span></a></h3><table><thead><tr><th style="text-align:center;"><div style="width:10em;">方法</div></th><th style="text-align:center;"><div style="width:10em;">介绍</div></th></tr></thead><tbody><tr><td style="text-align:center;">len(str)</td><td style="text-align:center;">求长度</td></tr><tr><td style="text-align:center;">+或fmt.Sprintf</td><td style="text-align:center;">拼接字符串</td></tr><tr><td style="text-align:center;">strings.Split</td><td style="text-align:center;">分割</td></tr><tr><td style="text-align:center;">strings.Contains</td><td style="text-align:center;">判断是否包含</td></tr><tr><td style="text-align:center;">strings.HasPrefix,strings.HasSuffix</td><td style="text-align:center;">前缀/后缀判断</td></tr><tr><td style="text-align:center;">strings.Index(),strings.LastIndex()</td><td style="text-align:center;">字符串出现的位置</td></tr><tr><td style="text-align:center;">strings.Join(a[]string, sep string)</td><td style="text-align:center;">join操作</td></tr></tbody></table><h3 id="byte和rune类型" tabindex="-1"><a class="header-anchor" href="#byte和rune类型"><span>byte和rune类型</span></a></h3><p>组成每个字符串的元素叫做<mark>字符</mark>，可以通过遍历或者单个获取字符串元素获得字符。</p><p>字符用单引号 <code>&#39;</code> 包裹起来，如：<code>var a := &#39;伟大大&#39;</code></p><div class="hint-container note"><p class="hint-container-title"><code>Go</code> 语言的字符有以下两种：</p><ul><li><code>uint8</code>类型，或者叫 <code>byte</code> 型，代表了<code>ASCII</code>码的一个字符。</li><li><code>rune</code>类型，代表一个 <code>UTF-8</code>字符。</li></ul></div><p>当需要处理中文、日文或者其他复合字符时，则需要用到<code>rune</code>类型。<code>rune</code>类型实际是一个<code>int32</code>。</p><p><code>Go</code> 使用了特殊的 <code>rune</code> 类型来处理<code>Unicode</code>，让基于 <code>Unicode</code>的文本处理更为方便，也可以使用<code>byte</code> 型进行默认字符串处理，性能和扩展性都有照顾</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-go"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 遍历字符串</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">func</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> traversalString</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">docs.sreio.com 伟大大</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    for</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> len</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //byte</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        fmt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%v</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%c</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">) </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">],</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">])</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    fmt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">---------------</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    for</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> _</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> range</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //rune</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        fmt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Printf</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%v</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">%c</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">) </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    fmt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ---------------</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">	  fmt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">len</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 字符串的长度是byte字节的长度。</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    fmt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">utf8</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">RuneCountInString</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 通过函数统计rune字符串的长度</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    fmt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">len</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">([]</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">rune</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)))</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 通过转换为rene切片来统计字符串长度</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 执行结果 注意后边的汉字输出结果</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">100(d) 111(o) 99(c) 115(s) 46(.) 115(s) 114(r) 101(e) 105(i) 111(o) 46(.) 99(c) 111(o) 109(m) 32( ) 228(ä) 188(¼) 159() 229(å) 164(¤) 167(§) 229(å) 164(¤) 167(§) </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">---------------</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">100(d) 111(o) 99(c) 115(s) 46(.) 115(s) 114(r) 101(e) 105(i) 111(o) 46(.) 99(c) 111(o) 109(m) 32( ) 20255(伟) 22823(大) 22823(大) </span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">因为UTF8编码下一个中文汉字由3~4个字节组成，所以我们不能简单的按照字节去遍历一个包含中文的字符串，</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">否则就会出现上面输出中第一行的结果。字符串底层是一个byte数组，所以可以和[]byte类型相互转换。</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">字符串是不能修改的 字符串是由byte字节组成，所以字符串的长度是byte字节的长度。</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> rune类型用来表示utf8字符，一个rune字符由一个或多个byte组成。</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">*/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="修改字符串" tabindex="-1"><a class="header-anchor" href="#修改字符串"><span>修改字符串</span></a></h3><p>要修改字符串，需要先将其转换成<code>[]rune</code>或<code>[]byte</code>，完成后再转换为<code>string</code>。无论哪种转换，都会重新分配内存，并复制字节数组。</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-go"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">func</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> changeString</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    s1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 强制类型转换</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    byteS1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> []</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">byte</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">s1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    byteS1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">H</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    fmt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">string</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">byteS1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    s2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">真狗</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    runeS2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> []</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">rune</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">s2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    runeS2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">狗</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    fmt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">string</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">runeS2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">Hello</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">狗狗</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">*/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换"><span>类型转换</span></a></h3><p>Go语言中只有<mark>强制类型</mark>转换，没有<mark>隐式类型</mark>转换。该语法只能在两个类型之间支持相互转换的时候使用。</p><div class="hint-container note"><p class="hint-container-title">强制类型转换的基本语法如下：</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-go"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">T</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">表达式</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中，T表示要转换的类型。表达式包括变量、复杂算子和函数返回值等.</p></div><p>比如计算直角三角形的斜边长时使用<code>math</code>包的<code>Sqrt()</code>函数，该函数接收的是<code>float64</code>类型的参数，</p><p>而变量<code>a</code>和<code>b</code>都是<code>int</code>类型的，这个时候就需要将<code>a</code>和<code>b</code>强制类型转换为<code>float64</code>类型。</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-go"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">func</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> sqrtDemo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> c</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // math.Sqrt()接收的参数是float64类型，需要强制转换</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">math</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Sqrt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">float64</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">a</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">a</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)))</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    fmt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,41)]))}const k=s(n,[["render",l]]),p=JSON.parse('{"path":"/golang/golang_study/%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/","title":"基本类型","lang":"zh-CN","frontmatter":{"title":"基本类型","createTime":"2025/07/04 10:57:04","permalink":"/golang/golang_study/基本类型/","description":"基本类型 支持八进制、 六进制，以及科学记数法。标准库 math 定义了各数字类型取值范围。 空指针值 nil，而非C/C++中的NULL 整型 整型： 按长度分为： int8、int16、int32、int64 对应无符号整型 uint8、uint16、uint32、uint64 其中，uint8就是我们熟知的byte型，int16对应C语言中的sh...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基本类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-04T07:21:35.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://docs.sreio.com/golang/golang_study/%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/"}],["meta",{"property":"og:site_name","content":"Sreio Docs"}],["meta",{"property":"og:title","content":"基本类型"}],["meta",{"property":"og:description","content":"基本类型 支持八进制、 六进制，以及科学记数法。标准库 math 定义了各数字类型取值范围。 空指针值 nil，而非C/C++中的NULL 整型 整型： 按长度分为： int8、int16、int32、int64 对应无符号整型 uint8、uint16、uint32、uint64 其中，uint8就是我们熟知的byte型，int16对应C语言中的sh..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-04T07:21:35.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-04T07:21:35.000Z"}]]},"readingTime":{"minutes":5.22,"words":1567},"git":{"createdTime":1751613695000,"updatedTime":1751613695000,"contributors":[{"name":"sreio","username":"sreio","email":"ingwei@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/sreio?v=4","url":"https://github.com/sreio"}],"changelog":[{"hash":"0d7a066249c8abc68deea12e75405510469cd820","time":1751613695000,"email":"ingwei@163.com","author":"sreio","message":"go基础"}]},"autoDesc":true,"filePathRelative":"golang/1.入门教程/1.基础/5.基本类型.md","headers":[]}');export{k as comp,p as data};
