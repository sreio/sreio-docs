import{_ as s,c as p,b as t,e as r,a,w as i,d as l,r as o,o as d}from"./app-DDsjqNbb.js";const m={},u={class:"vp-field-group"},y={class:"vp-field-group"},g={class:"vp-field-group"};function f(k,e){const n=o("VPField");return d(),p("div",null,[e[20]||(e[20]=t("h2",{id:"内置类型",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#内置类型"},[t("span",null,"内置类型")])],-1)),e[21]||(e[21]=t("h3",{id:"值类型",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#值类型"},[t("span",null,"值类型")])],-1)),t("div",u,[a(n,{name:"bool",type:"bool"}),a(n,{name:"int",type:"int"},{default:i(()=>e[0]||(e[0]=[t("p",null,"32 or 64",-1)])),_:1,__:[0]}),a(n,{name:"int8",type:"int8"}),a(n,{name:"int8",type:"int8"}),a(n,{name:"int16",type:"int16"}),a(n,{name:"int32",type:"int32"}),a(n,{name:"int64",type:"int64"}),a(n,{name:"int",type:"int"},{default:i(()=>e[1]||(e[1]=[t("p",null,"32 or 64",-1)])),_:1,__:[1]}),a(n,{name:"uint8",type:"uint8"},{default:i(()=>e[2]||(e[2]=[t("p",null,"byte",-1)])),_:1,__:[2]}),a(n,{name:"uint8",type:"uint8"}),a(n,{name:"uint16",type:"uint16"}),a(n,{name:"uint32",type:"uint32"}),a(n,{name:"uint64",type:"uint64"}),a(n,{name:"float32",type:"float32"}),a(n,{name:"float64",type:"float64"}),a(n,{name:"string",type:"string"}),a(n,{name:"complex64",type:"complex64"}),a(n,{name:"complex128",type:"complex128"}),a(n,{name:"array",type:"array"},{default:i(()=>e[3]||(e[3]=[t("p",null,"固定长度的数组",-1)])),_:1,__:[3]})]),e[22]||(e[22]=t("h3",{id:"引用类型-指针类型",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#引用类型-指针类型"},[t("span",null,"引用类型（指针类型）")])],-1)),t("div",y,[a(n,{name:"slice",type:"slice"},{default:i(()=>e[4]||(e[4]=[t("p",null,"序列数组",-1)])),_:1,__:[4]}),a(n,{name:"map",type:"map"},{default:i(()=>e[5]||(e[5]=[t("p",null,"映射",-1)])),_:1,__:[5]}),a(n,{name:"chan",type:"chan"},{default:i(()=>e[6]||(e[6]=[t("p",null,"管道",-1)])),_:1,__:[6]})]),e[23]||(e[23]=t("h2",{id:"内置函数",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#内置函数"},[t("span",null,"内置函数")])],-1)),e[24]||(e[24]=t("blockquote",null,[t("p",null,[l("Go 语言拥有一些不需要进行导入操作就可以使用的内置函数。它们有时可以针对不同的类型进行操作，例如："),t("code",null,"len"),l("、"),t("code",null,"cap"),l(" 和 "),t("code",null,"append"),l("，或必须用于系统级的操作，例如："),t("code",null,"panic"),l("。因此，它们需要直接获得编译器的支持。")])],-1)),t("div",g,[a(n,{name:"append",type:"append"},{default:i(()=>e[7]||(e[7]=[t("p",null,"用来追加元素到数组、slice(切片)中，返回修改后的数组、slice",-1)])),_:1,__:[7]}),a(n,{name:"close",type:"close"},{default:i(()=>e[8]||(e[8]=[t("p",null,"主要用来关闭channel",-1)])),_:1,__:[8]}),a(n,{name:"delete",type:"delete"},{default:i(()=>e[9]||(e[9]=[t("p",null,"从map中删除key对应的value",-1)])),_:1,__:[9]}),a(n,{name:"panic",type:"panic"},{default:i(()=>e[10]||(e[10]=[t("p",null,"停止常规的goroutine （panic、recover：用来处理错误）",-1)])),_:1,__:[10]}),a(n,{name:"recover",type:"recover"},{default:i(()=>e[11]||(e[11]=[t("p",null,"允许程序定义goroutine的panic动作",-1)])),_:1,__:[11]}),a(n,{name:"real",type:"real"},{default:i(()=>e[12]||(e[12]=[t("p",null,"返回complex的实部 （complex、real imag：用于创建和操作复数）",-1)])),_:1,__:[12]}),a(n,{name:"imag",type:"imag"},{default:i(()=>e[13]||(e[13]=[t("p",null,"返回complex的虚部",-1)])),_:1,__:[13]}),a(n,{name:"make",type:"make"},{default:i(()=>e[14]||(e[14]=[t("p",null,"用来分配内存，返回Type本身(只能应用于slice, map, channel)",-1)])),_:1,__:[14]}),a(n,{name:"new",type:"new"},{default:i(()=>e[15]||(e[15]=[t("p",null,"用来分配内存，主要用来分配值类型，比如int、struct。返回指向Type的指针",-1)])),_:1,__:[15]}),a(n,{name:"cap",type:"cap"},{default:i(()=>e[16]||(e[16]=[t("p",null,"capacity是容量的意思，用于返回某个类型的最大容量（只能用于切片和 map）",-1)])),_:1,__:[16]}),a(n,{name:"copy",type:"copy"},{default:i(()=>e[17]||(e[17]=[t("p",null,"于复制和连接slice，返回复制的数目",-1)])),_:1,__:[17]}),a(n,{name:"len",type:"len"},{default:i(()=>e[18]||(e[18]=[t("p",null,"来求长度，比如string、array、slice、map、channel ，返回长度",-1)])),_:1,__:[18]}),a(n,{name:"print、println",type:"print、println"},{default:i(()=>e[19]||(e[19]=[t("p",null,"底层打印函数，在部署环境中建议使用 fmt 包:::",-1)])),_:1,__:[19]})]),e[25]||(e[25]=r(`<h2 id="内置接口-error" tabindex="-1"><a class="header-anchor" href="#内置接口-error"><span>内置接口 error</span></a></h2><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-go"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 只要实现了Error()函数，返回值为String的都实现了err接口 </span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">typr</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> error</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> interface</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    Error</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">    String</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2))])}const c=s(m,[["render",f]]),_=JSON.parse('{"path":"/golang/golang_study/%E5%86%85%E7%BD%AE%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%87%BD%E6%95%B0/","title":"内置变量类型和函数","lang":"zh-CN","frontmatter":{"title":"内置变量类型和函数","createTime":"2025/07/04 11:42:54","permalink":"/golang/golang_study/内置变量类型和函数/","description":"内置类型 值类型 引用类型（指针类型） 内置函数 Go 语言拥有一些不需要进行导入操作就可以使用的内置函数。它们有时可以针对不同的类型进行操作，例如：len、cap 和 append，或必须用于系统级的操作，例如：panic。因此，它们需要直接获得编译器的支持。 内置接口 error","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"内置变量类型和函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-04T07:21:35.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://docs.sreio.com/golang/golang_study/%E5%86%85%E7%BD%AE%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%87%BD%E6%95%B0/"}],["meta",{"property":"og:site_name","content":"Sreio Docs"}],["meta",{"property":"og:title","content":"内置变量类型和函数"}],["meta",{"property":"og:description","content":"内置类型 值类型 引用类型（指针类型） 内置函数 Go 语言拥有一些不需要进行导入操作就可以使用的内置函数。它们有时可以针对不同的类型进行操作，例如：len、cap 和 append，或必须用于系统级的操作，例如：panic。因此，它们需要直接获得编译器的支持。 内置接口 error"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-04T07:21:35.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-04T07:21:35.000Z"}]]},"readingTime":{"minutes":1.91,"words":572},"git":{"createdTime":1751613695000,"updatedTime":1751613695000,"contributors":[{"name":"sreio","username":"sreio","email":"ingwei@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/sreio?v=4","url":"https://github.com/sreio"}],"changelog":[{"hash":"0d7a066249c8abc68deea12e75405510469cd820","time":1751613695000,"email":"ingwei@163.com","author":"sreio","message":"go基础"}]},"autoDesc":true,"filePathRelative":"golang/1.入门教程/1.基础/6.内置变量类型和函数.md","headers":[]}');export{c as comp,_ as data};
