import{_ as d,c as i,b as e,e as s,a as n,w as r,r as c,o,d as a}from"./app-DDsjqNbb.js";const g={},y={class:"table-of-contents"};function h(x,t){const l=c("router-link");return o(),i("div",null,[e("nav",y,[e("ul",null,[e("li",null,[n(l,{to:"#算术运算符"},{default:r(()=>t[0]||(t[0]=[a("算术运算符")])),_:1,__:[0]})]),e("li",null,[n(l,{to:"#关系运算符"},{default:r(()=>t[1]||(t[1]=[a("关系运算符")])),_:1,__:[1]})]),e("li",null,[n(l,{to:"#逻辑运算符"},{default:r(()=>t[2]||(t[2]=[a("逻辑运算符")])),_:1,__:[2]})]),e("li",null,[n(l,{to:"#位运算符"},{default:r(()=>t[3]||(t[3]=[a("位运算符")])),_:1,__:[3]})]),e("li",null,[n(l,{to:"#赋值运算符"},{default:r(()=>t[4]||(t[4]=[a("赋值运算符")])),_:1,__:[4]})])])]),t[5]||(t[5]=s('<h2 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符"><span>算术运算符</span></a></h2><table><thead><tr><th style="text-align:center;"><div style="width:10em;">运算符</div></th><th style="text-align:center;"><div style="width:10em;">描述</div></th></tr></thead><tbody><tr><td style="text-align:center;">+</td><td style="text-align:center;">相加</td></tr><tr><td style="text-align:center;">-</td><td style="text-align:center;">相减</td></tr><tr><td style="text-align:center;">*</td><td style="text-align:center;">相乘</td></tr><tr><td style="text-align:center;">/</td><td style="text-align:center;">相除</td></tr><tr><td style="text-align:center;">%</td><td style="text-align:center;">求余</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title"><code>++</code>（自增）和 <code>--</code>（自减）在Go语言中是单独的语句，并不是运算符。</p></div><h2 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符"><span>关系运算符</span></a></h2><table><thead><tr><th style="text-align:center;"><div style="width:10em;">运算符</div></th><th style="text-align:center;"><div style="width:10em;">描述</div></th></tr></thead><tbody><tr><td style="text-align:center;">==</td><td style="text-align:center;">检查两个值是否相等，如果相等返回 True 否则返回 False。</td></tr><tr><td style="text-align:center;">!=</td><td style="text-align:center;">检查两个值是否不相等，如果不相等返回 True 否则返回 False。</td></tr><tr><td style="text-align:center;">&gt;</td><td style="text-align:center;">检查左边值是否大于右边值，如果是返回 True 否则返回 False。</td></tr><tr><td style="text-align:center;">&gt;=</td><td style="text-align:center;">检查左边值是否大于等于右边值，如果是返回 True 否则返回 False。</td></tr><tr><td style="text-align:center;">&lt;</td><td style="text-align:center;">检查左边值是否小于右边值，如果是返回 True 否则返回 False。</td></tr><tr><td style="text-align:center;">&lt;=</td><td style="text-align:center;">检查左边值是否小于等于右边值，如果是返回 True 否则返回 False。</td></tr></tbody></table><h2 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符"><span>逻辑运算符</span></a></h2><table><thead><tr><th style="text-align:center;"><div style="width:10em;">运算符</div></th><th style="text-align:center;"><div style="width:10em;">描述</div></th></tr></thead><tbody><tr><td style="text-align:center;">&amp;&amp;</td><td style="text-align:center;">逻辑 AND 运算符。 如果两边的操作数都是 True，则为 True，否则为 False。</td></tr><tr><td style="text-align:center;">ll</td><td style="text-align:center;">逻辑 OR 运算符。 如果两边的操作数有一个 True，则为 True，否则为 False。</td></tr><tr><td style="text-align:center;">!</td><td style="text-align:center;">逻辑 NOT 运算符。 如果条件为 True，则为 False，否则为 True。</td></tr></tbody></table><h2 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符"><span>位运算符</span></a></h2><div class="hint-container tip"><p class="hint-container-title">位运算符对整数在内存中的二进制位进行操作。</p></div><table><thead><tr><th style="text-align:center;"><div style="width:10em;">运算符</div></th><th style="text-align:center;"><div style="width:10em;">描述</div></th></tr></thead><tbody><tr><td style="text-align:center;">&amp;</td><td style="text-align:center;">参与运算的两数各对应的二进位相与。（两位均为1才为1）</td></tr><tr><td style="text-align:center;">l</td><td style="text-align:center;">参与运算的两数各对应的二进位相或。（两位有一个为1就为1）</td></tr><tr><td style="text-align:center;">^</td><td style="text-align:center;">参与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为1。（两位不一样则为1）</td></tr><tr><td style="text-align:center;">&lt;&lt;</td><td style="text-align:center;">左移n位就是乘以2的n次方。“a&lt;&lt;b”是把a的各二进位全部左移b位，高位丢弃，低位补0。</td></tr><tr><td style="text-align:center;">&gt;&gt;</td><td style="text-align:center;">右移n位就是除以2的n次方。“a&gt;&gt;b”是把a的各二进位全部右移b位。</td></tr></tbody></table><h2 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符"><span>赋值运算符</span></a></h2><table><thead><tr><th style="text-align:center;"><div style="width:10em;">运算符</div></th><th style="text-align:center;"><div style="width:10em;">描述</div></th></tr></thead><tbody><tr><td style="text-align:center;">=</td><td style="text-align:center;">简单的赋值运算符，将一个表达式的值赋给一个左值</td></tr><tr><td style="text-align:center;">+=</td><td style="text-align:center;">相加后再赋值</td></tr><tr><td style="text-align:center;">-=</td><td style="text-align:center;">相减后再赋值</td></tr><tr><td style="text-align:center;">*=</td><td style="text-align:center;">相乘后再赋值</td></tr><tr><td style="text-align:center;">/=</td><td style="text-align:center;">相除后再赋值</td></tr><tr><td style="text-align:center;">%=</td><td style="text-align:center;">求余后再赋值</td></tr><tr><td style="text-align:center;">&lt;&lt;=</td><td style="text-align:center;">左移后赋值</td></tr><tr><td style="text-align:center;">&gt;&gt;=</td><td style="text-align:center;">右移后赋值</td></tr><tr><td style="text-align:center;">&amp;=</td><td style="text-align:center;">按位与后赋值</td></tr><tr><td style="text-align:center;">l=</td><td style="text-align:center;">按位或后赋值</td></tr><tr><td style="text-align:center;">^=</td><td style="text-align:center;">按位异或后赋值</td></tr></tbody></table>',12))])}const m=d(g,[["render",h]]),u=JSON.parse('{"path":"/golang/golang_study/%E8%BF%90%E7%AE%97%E7%AC%A6/","title":"运算符","lang":"zh-CN","frontmatter":{"title":"运算符","createTime":"2025/07/03 09:24:49","permalink":"/golang/golang_study/运算符/","description":"算术运算符 ++（自增）和 --（自减）在Go语言中是单独的语句，并不是运算符。 关系运算符 逻辑运算符 位运算符 位运算符对整数在内存中的二进制位进行操作。 赋值运算符","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"运算符\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-03T10:28:55.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://docs.sreio.com/golang/golang_study/%E8%BF%90%E7%AE%97%E7%AC%A6/"}],["meta",{"property":"og:site_name","content":"Sreio Docs"}],["meta",{"property":"og:title","content":"运算符"}],["meta",{"property":"og:description","content":"算术运算符 ++（自增）和 --（自减）在Go语言中是单独的语句，并不是运算符。 关系运算符 逻辑运算符 位运算符 位运算符对整数在内存中的二进制位进行操作。 赋值运算符"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-03T10:28:55.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-03T10:28:55.000Z"}]]},"readingTime":{"minutes":2.06,"words":619},"git":{"createdTime":1751522764000,"updatedTime":1751538535000,"contributors":[{"name":"sreio","username":"sreio","email":"ingwei@163.com","commits":2,"avatar":"https://avatars.githubusercontent.com/sreio?v=4","url":"https://github.com/sreio"}],"changelog":[{"hash":"045abf9050498a773daedc6c459b49b2258bd56f","time":1751538535000,"email":"ingwei@163.com","author":"sreio","message":"update"},{"hash":"bebfa7543857b9d8c19476b68527fc2acfde7ccc","time":1751522764000,"email":"ingwei@163.com","author":"sreio","message":"update"}]},"autoDesc":true,"filePathRelative":"golang/1.入门教程/1.基础/3.运算符.md","headers":[]}');export{m as comp,u as data};
